// Code generated by go-bindata.
// sources:
// www/index.html
// www/index.js
// DO NOT EDIT!

package main

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _wwwIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\x4f\x6f\xdb\x20\x14\x3f\xe3\x4f\xc1\x7c\x4f\x68\x32\xed\xe2\x11\x5f\xba\x49\x3b\x4c\x6b\x0f\xdb\x61\x47\x82\x5f\xea\xd7\x62\x40\xf0\xdc\xc4\xaa\xf6\xdd\x27\xc0\xc9\x9c\xae\xd2\x76\x31\x06\x7e\x7f\x1e\xef\x07\xf2\xdd\xa7\xbb\xdb\xef\x3f\xef\x3f\xf3\x9e\x06\xd3\x56\xf2\x3c\x80\xea\xda\x8a\x49\x42\x32\xd0\x7e\x75\x93\x32\x34\xdd\x59\xe0\x5f\xdc\x00\x47\x17\x9e\xa4\x28\x5b\x15\x93\x91\x26\x03\x9c\x26\x0f\xbb\x9a\xe0\x44\x42\xc7\x58\xb7\x15\x63\x69\xa2\x02\x28\xfe\x52\x31\xc6\x3a\x8c\xde\xa8\xa9\xe1\x7b\xe3\xf4\xd3\xc7\xb4\xd4\x03\x3e\xf4\xd4\xf0\xcd\x87\x1b\x7f\xca\x2b\x47\xec\xa8\x6f\xf8\xfb\x9b\x79\xe1\x57\x55\x31\x66\xd4\x1e\xcc\x2b\x11\xb4\x06\x2d\xac\xfe\x68\xcd\xcc\xcd\x99\x99\xdd\x57\xca\xe0\x83\x6d\x78\x48\x3e\x17\xbd\xb5\x76\x96\xc0\x52\x91\x3c\xf6\x48\xb0\x8a\x5e\x69\x68\xb8\x0f\x90\xc9\x83\x0a\x0f\x68\x57\xe4\x7c\xaa\x6e\x51\xcb\xda\xbb\x48\xbc\x7c\x5f\x16\x48\x03\x07\x6a\xf8\xf6\x6f\xe8\x7c\x7a\xed\x8c\x0b\xe9\xec\xe3\x95\x41\xa1\x5d\x58\x4c\x8a\xdc\xcd\xb6\x92\xa2\x44\x20\xf7\xae\x9b\x52\x97\xfb\xcd\xdb\x31\xf4\x9b\xb4\x7b\x70\x61\xe0\xda\xa8\x18\x77\x35\x74\x48\x2e\xe4\x04\x64\x87\xcf\x69\x64\xb2\xf4\xf0\xe0\xc2\xae\x1e\x23\x04\xab\x06\xa8\xdb\x1f\x11\x02\xff\xa6\x06\x68\xa4\xc8\x80\x82\x45\xeb\x47\x5a\x04\x5a\xf3\x04\x5f\x10\xb9\x1a\xc9\x1d\x9c\x1e\x63\x36\x11\xb3\xcb\x9b\x6e\x1a\x69\xaa\xdb\x5b\xa4\xe9\xff\x4c\x0a\xfe\x9f\xb2\x39\xdd\xac\x51\xb7\xf7\xa9\xcf\xb7\x25\xd3\x6b\x93\xcb\x0d\x2c\xda\x4b\x92\x14\xe7\xcd\x6b\xb3\x65\x5d\x71\xdc\x0f\x78\xa9\x6c\x9e\xa5\x76\x8b\xd4\xef\xf4\x73\x66\xf5\xdb\x5c\x45\x94\xa2\xdf\x9e\x6b\xe6\xd8\xed\xea\x74\x07\x62\x72\x2b\xc8\x79\x4c\xaf\x46\x07\xf4\xc4\x63\xd0\xbb\xba\x27\xf2\xb1\x11\x42\x77\x76\xed\x9d\x99\x0e\x68\xcc\x1a\x9d\x78\xde\x8a\xcb\x74\x40\xbb\x7e\xcc\x4a\x85\xd9\xbe\xd2\x40\xdb\xc1\x29\x21\x96\x2f\xf1\x51\x3d\xab\x02\x5a\x12\xa5\x28\x97\x4a\x8a\xf2\xda\x7f\x07\x00\x00\xff\xff\x21\xa1\xc1\x9f\x05\x04\x00\x00")

func wwwIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_wwwIndexHtml,
		"www/index.html",
	)
}

func wwwIndexHtml() (*asset, error) {
	bytes, err := wwwIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "www/index.html", size: 1029, mode: os.FileMode(420), modTime: time.Unix(1502238007, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wwwIndexJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x55\xcd\x6e\xdc\x36\x10\x3e\x8b\x4f\x31\x41\x0f\x94\x00\x99\xb9\x2f\xa0\x1e\xe2\x1a\x28\x8a\xc2\x0d\xea\x14\x3d\x04\x46\x41\x53\x23\x8b\x5d\x2e\xa9\x52\xa3\x4d\x17\xce\xbe\x7b\x31\xd4\xcf\xca\x72\x62\x24\x3d\x49\x9c\x99\x6f\xe6\x9b\x1f\x0e\xeb\x60\x86\x03\x7a\x52\x0f\xa1\x3e\xa9\xe0\x5d\xd0\x35\x54\xd0\x0c\xde\x90\x0d\x3e\x2f\xe0\x49\x64\x0d\x92\x69\x73\xf9\x96\xf0\x5f\x92\x85\xa2\x16\x7d\x1e\xb1\xef\xa0\xfa\x11\xf8\xab\x58\x91\x17\x1b\xcd\x93\xc8\x32\x87\x04\x5d\xe8\xa9\x87\x0a\x7e\xb9\xfb\xed\x56\x75\x3a\xf6\x98\x4c\x0a\x91\x65\xb6\x81\x3c\xa9\xf9\x90\xa5\x3f\xd5\x84\x78\xa3\x4d\x9b\xe4\x63\x00\x5f\x63\x7c\x1f\x7a\x4a\xa2\xa2\x10\xd9\xb9\x10\x67\x21\x16\xea\xff\x0c\x18\x4f\x77\xe8\xd0\x50\x88\xb9\x54\x58\x5b\x0a\x51\x16\x2a\xf8\x7e\x78\x38\x58\x82\x0a\xc6\x9f\x9b\xa4\x11\x62\x4e\xef\x99\x38\xc7\x12\x3a\x1d\xd1\xd3\x5f\xb6\x4e\x79\xa3\xea\x22\x1e\xd1\xd3\x4f\xd8\xe8\xc1\x51\x5e\x08\x91\x52\xe2\x62\x41\x05\xa8\xcc\x10\x19\xf0\x41\xc7\x47\x7c\x41\xa4\x09\xf1\x00\x1f\xbd\x3e\x60\xc5\x05\xba\xb2\xbe\x1b\xe8\x5e\x16\xa3\x8f\xa1\xc7\xf8\x5d\x3e\x18\xc0\x3f\x8b\x07\x63\xe9\xfb\x58\x30\x80\xd1\x22\x15\xfe\x0d\x3b\x54\x47\xed\x06\x84\xcf\x9f\xe1\x4d\x9a\x80\xcb\x91\x8d\xc7\x23\x37\x27\x22\x0d\xd1\x83\x76\x18\x29\x97\xef\x1d\xea\x1e\xa1\xb1\xce\x81\xf5\x40\x2d\xc2\x1f\x3d\xc6\x12\xae\x2d\x9d\x4a\xd0\xbe\x86\xeb\xe0\x09\x3d\x41\x63\xd1\xd5\xbd\x9c\x2b\x57\x6b\xd2\x50\xa5\xd9\x98\xf3\xd9\xc1\x85\x48\x29\xb2\xcc\x8c\xc8\x1d\x5c\x08\x25\xb1\xa5\xd3\x0e\x2e\xac\x44\x76\x9e\x12\xb9\x34\x4d\x64\x19\x07\x50\x8b\x04\xaa\x4b\x4b\xc5\x66\x90\x4b\x26\xd1\xa2\xae\x31\xf6\x3b\xf0\xf8\x09\x7e\x1e\x0f\xf9\x93\x9c\xd8\x5f\x7d\x38\x75\x28\x77\x20\x75\xd7\x39\x6b\x34\xcf\xcc\xdb\xbf\xfb\xe0\xe5\xb9\x60\x4e\x07\xa4\x36\xd4\x3b\x90\x3c\x99\x92\x25\xcc\x79\x37\x8e\x7a\x4f\xd1\xfa\x47\xdb\x9c\x72\xe6\x94\xc6\xf6\xff\x5c\x9d\x2f\xdf\x9c\xed\xad\x98\x42\x4f\xfd\xab\x40\xca\xf9\x9a\x1c\x75\x4c\x7e\xee\x28\x44\xd6\x3c\x9d\x57\xf3\xbf\x75\xc3\x91\x53\x9b\xec\x11\x2a\x58\x6e\x98\x89\xa8\x09\x6f\x1c\xf2\x29\x97\xb5\x3d\xce\x33\x78\x40\xd2\x53\x4f\xbf\xc1\x7a\x6a\xed\xb7\x19\xb7\xf1\x15\xbb\x36\xa6\x91\x9a\xc3\x2b\xdd\x75\xe8\xeb\x5c\xc2\x15\xc8\x32\xe5\xab\xe6\xf9\x2a\x61\xc4\xfe\x8e\x9d\x3b\xfd\x6a\xfd\x3e\xa5\xaa\x6c\xcd\xab\x64\x62\x34\xe3\x93\x66\x92\xad\xb4\xc6\xe9\xbe\xbf\xd5\x87\x54\xd9\x49\x28\x85\xc8\x6a\x7b\x9c\x91\x93\xb4\x5c\x2a\x52\x42\x1b\x8b\xd1\xe4\x19\x3c\x8d\x8a\x10\xd9\xd2\x93\x8f\x13\x9d\x7b\x4e\xd7\x1e\xc5\xb2\x15\xd5\xf3\x6d\xb4\x45\x2c\xda\xfb\x99\x43\x6d\x8f\x3c\x66\x80\xae\xc7\x84\xf8\xda\x8a\xfc\x21\xad\x5a\x59\xf0\x7e\x5b\x23\xc5\x7a\x36\xb6\x55\x9b\x68\x70\x6b\x9c\xf5\xfb\x57\x9a\xa3\x53\x0b\xad\xdf\x2f\x6d\x49\x5e\x16\x69\xf0\xc6\x59\xb3\x5f\xbf\x33\x38\xa6\xf8\x85\x8d\x3b\xde\x84\x10\xed\xa3\xf5\xda\xad\xa3\x7e\x6d\xef\x4f\x90\xf1\x08\xd5\x82\x55\xc6\x05\x8f\xb7\xa1\xc6\x9c\x22\xaf\xb5\xc9\xb0\xff\xa4\xbb\x77\xda\xec\x27\xfe\xfc\x56\xe5\x05\x5f\xc3\xd1\x83\x8a\xd8\x39\x6d\xf0\x4f\x4b\x6d\xce\xfc\x17\xa0\xd1\xde\xa0\x7b\x37\x10\x05\xff\x4a\x39\x1e\x92\x41\xe2\xb5\x46\x2c\xc5\xb9\x4e\xc2\x97\xfa\x4b\x99\xb6\x0c\x99\xc0\x44\x6e\x1e\xbf\x15\xb0\xb8\x68\x57\x2f\xe0\xb6\xd4\xd9\xf6\xed\x1b\xf7\x67\xb6\x8d\x95\x5a\x70\x4e\x29\x73\xef\xd6\xc5\x18\x83\xac\xc2\x6d\x3a\xf2\xe2\xdd\x52\x4d\x30\x43\xf2\xc8\x0e\xa7\x37\x85\xdd\x8a\xb3\xf8\x2f\x00\x00\xff\xff\x88\xba\xdb\xca\x8a\x08\x00\x00")

func wwwIndexJsBytes() ([]byte, error) {
	return bindataRead(
		_wwwIndexJs,
		"www/index.js",
	)
}

func wwwIndexJs() (*asset, error) {
	bytes, err := wwwIndexJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "www/index.js", size: 2186, mode: os.FileMode(420), modTime: time.Unix(1502237719, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"www/index.html": wwwIndexHtml,
	"www/index.js": wwwIndexJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"www": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{wwwIndexHtml, map[string]*bintree{}},
		"index.js": &bintree{wwwIndexJs, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
