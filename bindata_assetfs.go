// Code generated by go-bindata.
// sources:
// www/index.html
// www/index.js
// DO NOT EDIT!

package main

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _wwwIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x94\xcd\x6e\xdb\x38\x14\x85\xd7\xd4\x53\x70\x04\x04\x98\x01\xc6\xa2\x6d\x34\x28\xaa\xd0\x42\x81\xb4\x40\x17\x45\x93\x45\xbb\xe8\x92\xa6\xae\x23\x3a\xfc\x11\xc8\xab\xc4\x42\x90\x77\x2f\x48\xca\x8e\xf2\x53\xb4\x1b\xd3\x24\xcf\xf9\xce\x15\x79\x25\xfe\xcf\xa7\xab\xcb\xef\x3f\xaf\x3f\xd3\x0e\x8d\x6e\x0a\x7e\x1c\x40\xb4\x4d\x41\x38\x2a\xd4\xd0\x7c\x75\xa3\xd0\x38\x5e\x59\xa0\x5f\x9c\x81\x7b\xe7\x6f\x39\xcb\x5b\x05\xe1\x01\x47\x0d\x14\xc7\x1e\x36\x25\xc2\x01\x99\x0c\xa1\x6c\x0a\x42\xb6\xae\x1d\xe9\x43\x41\x08\x31\xe2\xb0\xb8\x57\x2d\x76\x35\x3d\x5f\x82\xb9\xc8\x6b\xfe\x46\xd9\x9a\x8a\x01\x5d\x5c\x78\x2c\x08\xf9\x68\xa0\x55\x82\xfe\x6b\x94\x9d\xeb\xff\xcb\x94\x00\x12\x95\xb3\xff\xd3\x56\xe7\x05\xd2\xaa\xd0\x6b\x31\xd6\x54\x59\xad\x2c\x2c\xb6\xda\xc9\xdb\x44\x27\x93\xfd\xdd\x87\xb3\x3c\x7f\x19\x97\xf2\x1e\x8b\x82\x90\x58\xb3\xf0\x20\x32\xf3\x84\x7c\x62\x75\xa0\x6e\x3a\xac\xe9\xea\x7c\xd9\x1f\xd2\xca\x04\x5f\x2d\x97\x67\x17\x47\x8c\x16\x5b\xd0\x2f\x18\xaf\xca\x7a\x32\x4e\xa4\x18\xbe\x10\x5a\xdd\xd8\x9a\xfa\x18\x73\xe2\x55\xd2\x59\x04\x8b\x19\x79\xdf\x29\x84\x45\xe8\x85\x84\x9a\xf6\x1e\x66\x47\xb8\x40\xd7\xc7\xe2\x32\x31\x7b\x7b\x17\x90\xe6\xdf\x87\x99\x52\xc3\x0e\x6b\xba\x7e\x2d\x9d\x1e\x5e\x3a\xed\x7c\x7c\xf4\xe1\x59\x40\xb6\x9d\x5c\x84\xb3\x74\xe7\x4d\xc1\x59\x6e\x14\x1e\xaf\x3a\xf6\x42\xb7\x7a\xbb\x59\xba\x55\xdc\xdd\x39\x6f\xa8\xd4\x22\x84\x4d\x09\xad\x42\xe7\x53\x9f\xf0\x56\xdd\xc5\x91\xf0\x7c\x86\x3b\xe7\x37\xe5\x10\xc0\x5b\x61\xa0\x6c\x7e\x04\xf0\xf4\x9b\x30\x50\x73\x96\x04\x59\xab\x6c\x3f\xe0\xac\xed\x4a\x1a\xe5\x33\x63\xba\xea\x9d\x93\x43\x48\x21\x6c\x4a\x79\x33\x4d\x2a\x1c\xcb\xe6\x52\xe1\xf8\x77\x21\x59\xff\x47\x6c\xba\xdd\xc4\x28\x9b\xeb\x78\xce\x97\xf9\x4e\x9f\x87\x9c\x1a\x30\xb3\xe7\x26\xce\x8e\x9b\xcf\xc3\xe6\x75\x85\x61\x6b\xd4\xa9\xb2\x69\x16\x8f\x9b\xc5\xf3\x8e\x7f\x8e\xae\x6e\x9d\xaa\x08\x9c\x75\xeb\x63\xcd\x54\xb5\x9b\x32\xf6\x40\x88\x69\x59\x39\x8d\xf1\xdd\x96\x5e\xf5\x48\x83\x97\x9b\xb2\x43\xec\x43\xcd\x98\x6c\x6d\xd5\x3b\x3d\xee\x94\xd6\x95\x72\xec\x6e\xcd\x4e\x53\xa3\x6c\xb5\x4f\xa4\xec\x6c\x5e\x30\x92\x7b\x1f\x2a\xa9\xdd\xd0\xee\xb4\xf0\x50\x49\x67\x98\xd8\x8b\x03\xd3\x6a\x1b\x98\x71\x06\x2c\x56\xfb\xc0\xd6\xd5\xfb\x6a\xf9\x34\xff\x3d\x53\xd9\x16\x0e\x51\x31\xff\x06\xed\xc5\x9d\xc8\xa2\xb9\x91\xb3\xdc\xa8\x9c\xe5\xef\xdc\xaf\x00\x00\x00\xff\xff\x16\x74\xf2\xac\xff\x04\x00\x00")

func wwwIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_wwwIndexHtml,
		"www/index.html",
	)
}

func wwwIndexHtml() (*asset, error) {
	bytes, err := wwwIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "www/index.html", size: 1279, mode: os.FileMode(420), modTime: time.Unix(1502246495, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wwwIndexJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x55\xcd\x6e\xdc\x36\x10\x3e\x8b\x4f\x31\x41\x0f\x14\xe1\x8d\x72\x5f\x60\x7b\xa8\x6b\xa0\x28\x0a\x37\xa8\x5d\xf4\x10\x18\x01\x2d\x8d\x2c\xd6\x14\xa9\x52\xa3\x4d\x17\xce\xf6\x99\xfa\x0c\x7d\xb2\x62\x48\xfd\x79\x9d\x4d\x90\x9c\x24\xce\xef\x37\xc3\x6f\x38\x95\x2f\x87\x16\x1d\x15\xf7\xbe\x3a\x14\xde\x59\xaf\x2b\xd8\x41\x3d\xb8\x92\x8c\x77\xb9\x82\x27\x91\xd5\x48\x65\x93\xcb\x37\x84\x7f\x93\x54\x05\x35\xe8\xf2\x80\x7d\x07\xbb\xef\x81\xbf\x05\x2b\x72\x75\xa2\x79\x12\x59\x66\x91\xa0\xf3\x3d\xf5\xb0\x83\x9f\x6f\x7e\xbd\x2e\x3a\x1d\x7a\x8c\x26\x4a\x64\x99\xa9\x21\x8f\x6a\x3e\x64\xf1\xaf\xa8\x7d\xb8\xd2\x65\x13\xe5\x29\x81\xab\x30\xbc\xf5\x3d\x45\x91\x52\x22\x3b\x2a\x71\x14\x62\x86\xfe\xd7\x80\xe1\x70\x83\x16\x4b\xf2\x21\x97\x05\x56\x86\x7c\x90\xaa\xf0\xae\x1f\xee\x5b\x43\xb0\x83\xf4\x73\x15\x35\x42\x4c\xe5\x3d\x13\xe7\xb8\x81\x4e\x07\x74\xf4\xde\x54\xb1\x6e\x2c\xba\x80\x7b\x74\xf4\x23\xd6\x7a\xb0\x94\x2b\x21\x62\x49\xdc\x2c\xd8\x01\x16\xe5\x10\xd8\xe1\x56\x87\x07\x7c\x01\xa4\xf6\xa1\x85\x77\x4e\xb7\xb8\xe3\x06\xbd\x36\xae\x1b\xe8\x4e\xaa\x14\x63\xe8\x31\x7c\x55\x0c\x76\xe0\x9f\x39\x42\x69\xe8\xeb\x50\xb0\x03\x7b\x8b\xd8\xf8\x57\x1c\xb0\xd8\x6b\x3b\x20\x7c\xfc\x08\xaf\x22\x03\x96\x23\x1b\xa7\x23\x5f\x4e\x40\x1a\x82\x03\x6d\x31\x50\x2e\xdf\x5a\xd4\x3d\x42\x6d\xac\x05\xe3\x80\x1a\x84\xdf\x7b\x0c\x1b\xb8\x34\x74\xd8\x80\x76\x15\x5c\x7a\x47\xe8\x08\x6a\x83\xb6\xea\xe5\xd4\xb9\x4a\x93\x86\x5d\xe4\xc6\x54\xcf\x16\x16\x20\x1b\x91\x65\x65\xf2\xdc\xc2\x02\x28\x8a\x0d\x1d\xb6\xb0\xa0\x12\xd9\x71\x2c\x64\xb9\x34\x91\x65\x9c\xa0\x98\x25\xb0\x5b\xae\x54\x9c\x10\x79\xc3\x20\x1a\xd4\x15\x86\x7e\x0b\x0e\x3f\xc0\x4f\xe9\x90\x3f\xc9\x11\xfd\xeb\xdb\x43\x87\x72\x0b\x52\x77\x9d\x35\xa5\x66\xce\xbc\xf9\xb3\xf7\x4e\x1e\x15\x63\x6a\x91\x1a\x5f\x6d\x41\x32\x33\x25\x4b\x18\xf3\x36\x51\xbd\xa7\x60\xdc\x83\xa9\x0f\x39\x63\x8a\xb4\xfd\x96\xd1\xf9\xf4\xe4\x9c\x4e\xc5\x98\x7a\xbc\xbf\x1d\x48\x39\x8d\xc9\x5e\x87\x18\xe7\x86\x7c\x60\xcd\xd3\x71\xc5\xff\xd3\x30\x9c\x99\x13\x93\x69\xb1\x27\xdd\x76\x1c\x0a\x72\x09\x17\xd0\x7a\x1e\xb6\x68\x56\x94\x01\x35\x61\xf5\x5e\x93\x2a\xea\xe0\xdb\x6b\xff\x21\x57\x70\x01\x52\xc9\xe4\x6f\x7d\x6a\x56\x74\x37\x0e\x38\x40\xf2\x64\xce\x5e\x70\x4c\xab\x69\xbb\xc8\xad\x26\x43\x43\x85\x51\x67\xbd\x7b\x58\xeb\xbc\x7b\x98\x95\x0a\x6e\xb1\xed\x30\x68\x1a\x02\xae\x8c\x68\x91\xb2\xd9\x7f\xff\x5e\x8e\x50\x5a\x24\x3d\xb2\x6e\x7e\x31\x12\xfe\x2b\x8b\xb1\x24\x59\x99\x3d\xcf\xd4\x64\x59\xe8\xae\x43\x57\xe5\x22\xcb\x24\xfc\x03\xf1\x5e\x63\x8e\x89\xb1\x2c\x98\x3b\xc4\x87\xa9\xdc\xc8\xd3\x18\xfb\x37\xec\xec\xe1\x17\xe3\x1e\x53\xc3\x22\x37\xa7\x19\x18\x09\xfe\x65\x40\xa3\xe1\x84\x27\x35\x30\xc9\x56\xda\xd2\xea\xbe\xbf\xd6\x6d\xbc\xf6\x51\x28\xc7\x54\x4d\xf8\x4c\x96\x26\x2c\x63\x69\xf6\x5f\x86\x53\x99\xfd\x04\x65\x4c\xb3\x99\xbb\xbb\x81\x26\x8c\x26\xcf\xf0\xc4\xc1\x10\x22\x9b\x19\xf8\x6e\xec\xc7\x1d\xe7\x33\x7b\x31\xef\x80\xe2\xf9\xdb\x7b\xea\x31\x6b\xef\x26\x0c\x95\xd9\xf3\x50\x01\xda\x1e\xa3\xc7\xb9\x85\xf0\x5d\x5c\x2c\x52\xf1\x6b\xbe\xf6\x14\xeb\x49\x38\xbd\xb6\x11\x46\x24\xb3\x71\x8f\x9f\xe9\x8e\x8e\xef\xb1\x71\x8f\x13\x30\x19\xa3\xcc\x52\xef\x4a\x6b\xca\xc7\xf5\x56\xc5\x54\xe2\x27\xf6\x4b\x9a\xfb\xb4\xc1\xd6\x39\xcf\xee\xb8\xd2\x7a\x87\xd7\xbe\xc2\x9c\x02\x3f\xd5\x63\x84\x52\xbb\x12\xed\x0f\x03\x51\x1c\xc2\x73\xd8\xef\xa3\x01\x43\xcd\xd6\x1e\x73\x25\x97\x51\xf8\x52\xbf\xd4\x94\x2b\x7e\xb0\x12\x9c\x22\x60\x67\x75\x89\x7f\x18\x6a\x72\xae\x3d\xc2\x19\x75\x13\x73\x56\x61\xd4\xa2\x5d\xad\xea\xd3\x2e\x65\xa7\x4b\x3a\x3d\xf4\xd9\xd9\x9c\x59\xdc\x0c\xa9\xf9\x6b\x6d\x72\x58\x25\x3d\x69\xea\x8b\x35\x5b\xd4\xbe\x1c\xfa\x5c\xa5\x55\x33\xae\x40\x0e\x2b\x8e\xe2\xff\x00\x00\x00\xff\xff\x69\x38\x97\x26\x39\x09\x00\x00")

func wwwIndexJsBytes() ([]byte, error) {
	return bindataRead(
		_wwwIndexJs,
		"www/index.js",
	)
}

func wwwIndexJs() (*asset, error) {
	bytes, err := wwwIndexJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "www/index.js", size: 2361, mode: os.FileMode(420), modTime: time.Unix(1502853056, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"www/index.html": wwwIndexHtml,
	"www/index.js": wwwIndexJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"www": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{wwwIndexHtml, map[string]*bintree{}},
		"index.js": &bintree{wwwIndexJs, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
