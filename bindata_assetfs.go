// Code generated by go-bindata.
// sources:
// www/index.html
// www/index.js
// DO NOT EDIT!

package main

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _wwwIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x52\xcd\x8e\xdb\x20\x10\x3e\xc3\x53\x50\xee\x09\x4a\xa4\x5e\x5c\xcc\x65\x5b\xa9\x87\x4a\xbb\x87\xf6\xd0\x23\x81\x49\xcd\x2e\x06\x04\xe3\x6c\xac\xaa\xef\x5e\x61\xe2\xc8\xbb\xda\xd3\x78\x3c\xdf\x9f\xc7\x23\x3f\x7d\x7d\x7c\xf8\xf9\xfb\xe9\x1b\x1b\x70\xf4\x8a\xca\xb5\x80\xb6\x8a\x12\x89\x0e\x3d\xa8\x1f\x71\xd6\x1e\xe7\xc7\x00\xec\x7b\x1c\xe1\x35\xe6\x17\x29\xda\x88\x12\x59\x70\xf6\xc0\x70\x4e\xd0\x73\x84\x2b\x0a\x53\x0a\x57\x94\x90\xda\xe8\x0c\x9a\xfd\xa5\x84\x10\xeb\x4a\xf2\x7a\xee\xd8\xc9\x47\xf3\xf2\x85\x12\xf2\x8f\x52\x42\xf6\x26\x06\x84\x80\x0d\xf4\x3a\x38\x84\x5d\x49\xda\x40\xc7\x52\x86\x0a\x23\xa3\xce\x7f\x5c\xd8\x61\x4c\x1d\x3b\x7c\x4e\xd7\xc6\x25\x52\x2c\xce\x8a\x4a\xd1\xe2\xca\x53\xb4\x73\x4d\x34\x1c\x3e\x8e\x3c\x1c\xea\xf4\x1c\xf3\xc8\x8c\xd7\xa5\xf4\x1c\xac\xc3\x98\x97\xb4\xd2\xba\x4b\xad\x44\x7a\x7d\x02\xcf\xce\x31\xf7\x7c\x2a\x90\x83\x1e\x81\xab\x5f\x05\x72\x27\xc5\x32\x6b\x30\x17\xd2\x84\x9b\xef\xe6\xac\x22\x37\x1c\xa6\x27\x8c\xe7\x68\xa6\xb2\xe8\x8b\x9b\xc1\x87\x46\x55\x60\xb7\x28\x72\xf5\x14\x0b\xb2\x87\xb6\x96\xb7\x96\xf7\x8d\x36\xa7\x2d\x49\x8a\x75\xf8\xd6\x6c\x9b\xb2\x4c\xa7\xd1\xdd\x73\xde\xba\xba\x12\x51\x77\x52\x1f\x56\xd6\x70\x5c\x52\x14\x29\x86\xe3\x9a\x99\x39\xdb\xf3\x54\xdf\x56\xb7\x86\xbc\xd5\x7a\x05\x26\xbb\x84\xac\x64\xd3\xf3\x01\x31\x95\x4e\x08\x63\xc3\x3e\x45\x3f\x9f\x9d\xf7\x7b\x17\xc5\xe5\x28\xee\xed\xe8\xc2\xfe\x79\x51\x6a\x4c\xf5\x4e\xc3\x05\x0b\xd7\x8a\xd8\x5e\xd6\xb3\xbe\xe8\x06\xda\x12\xa5\x68\x3f\x5e\x8a\x76\xbd\xff\x03\x00\x00\xff\xff\x41\xcf\x86\x55\xd5\x02\x00\x00")

func wwwIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_wwwIndexHtml,
		"www/index.html",
	)
}

func wwwIndexHtml() (*asset, error) {
	bytes, err := wwwIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "www/index.html", size: 725, mode: os.FileMode(420), modTime: time.Unix(1502231974, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wwwIndexJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x54\xcd\x6e\xdc\x2c\x14\x5d\x9b\xa7\x40\xf9\x16\x80\xe4\x90\xfd\x48\xfe\x16\x49\x23\x55\x55\x95\x56\x4d\x76\x55\x17\x04\xee\xc4\x74\x18\x70\x31\x9e\x74\x14\xcd\xbb\x57\x5c\x6c\x67\xe2\xfc\x28\xed\xca\xe6\xdc\xff\x73\x2e\x98\xa0\x87\x2d\xf8\x24\x6f\x83\xd9\xcb\xe0\x5d\x50\x86\x36\x74\x3d\x78\x9d\x6c\xf0\x5c\xd0\x07\x52\xad\x21\xe9\x96\xb3\xb3\x04\xbf\x13\x13\x32\xb5\xe0\x79\x84\xbe\xa3\xcd\xff\x34\x7f\x65\x36\x70\xb1\xb0\x3c\x90\xaa\x72\x90\x68\x17\xfa\xd4\xd3\x86\x7e\xba\xfe\x72\x25\x3b\x15\x7b\x40\x17\x41\xaa\xca\xae\x29\x47\x73\x3e\x54\xf8\x27\xd7\x21\x5e\x2a\xdd\x22\x5e\x0a\x78\x03\xf1\x6b\xe8\x13\x42\x42\x90\xea\x20\xc8\x81\x90\xb9\xf5\x5f\x03\xc4\xfd\x35\x38\xd0\x29\x44\xce\x24\x18\x9b\x42\x64\x42\x06\xdf\x0f\xb7\x5b\x9b\x68\x43\xcb\xcf\x25\x5a\x08\x99\xc6\x7b\x02\x73\xc0\x61\x41\x76\x11\x76\xe0\xd3\x07\x58\xab\xc1\x25\x2e\x08\xc1\x39\x32\x43\xb4\xa1\x20\xf5\x10\x23\xf8\x74\xa3\xe2\x1d\x3c\xab\xbe\x0e\x71\x4b\xbf\x7b\xb5\x85\x26\xb3\x72\x6a\x7d\x37\xa4\x1f\x4c\x94\x1c\x43\x0f\xf1\xaf\x72\xe4\x80\xfc\x93\x33\x94\x14\x46\x25\x45\x1b\x64\x77\x32\xae\x30\xaf\xdc\x29\x37\x40\x4d\xaa\x4a\x07\x9f\xc0\xa7\x15\xb6\x5c\x60\x52\x1d\xc8\x42\xc8\x3a\xa7\x68\x41\x19\x88\xfd\x8a\x7a\xb8\xa7\x1f\xcb\x81\x3f\xb0\x8b\x92\xe1\xf4\x66\xdf\x01\x5b\x51\xa6\xba\xce\x59\xad\x32\x67\x67\x3f\xfb\xe0\xd9\x41\xe4\x42\x5b\x48\x6d\x30\x2b\xca\xb2\x32\x2c\x23\xb9\xe2\xaa\x48\xdd\xa7\x68\xfd\x9d\x5d\xef\x79\x6e\x19\x65\xfb\x97\xd5\x79\x79\x73\x96\x5b\x31\x96\x2e\xc3\xd2\x86\x32\x36\xad\xc9\xac\xf5\x32\x24\x57\x41\x42\xed\x8e\x36\x74\xde\x26\x1d\x41\x25\xb8\x74\x90\x4f\x9c\x19\xbb\x9b\xc4\xdb\x42\x52\x23\xfb\xef\xf0\x1e\x45\x78\x9f\x73\x1b\xdf\xf0\x6b\x23\x8a\x3f\x95\x97\xaa\xeb\xc0\x1b\xce\xe8\x29\x65\x35\x72\x24\xa7\x4d\xa8\x69\x89\xfd\x06\x9d\xdb\x7f\xb6\x7e\x83\xa3\x4a\x6b\xf2\xb5\x19\x3b\x9a\xe2\xd1\x32\x62\x47\x56\xed\x54\xdf\x5f\xa9\x6d\x66\xf1\x64\x04\x4f\x08\xa9\x8c\xdd\x4d\x91\x23\x5a\xcf\x8c\xd4\xb4\x8d\xb9\xc5\xd7\xae\xe4\x7f\x78\xb5\x99\xc8\x57\x0b\x33\x18\xbb\x7b\x2a\xce\xb2\x6d\x6b\x66\x7d\x9c\xf5\x9b\x37\xd8\x51\xc8\xa1\xf5\x9b\x99\x17\xcc\x32\xa3\xc1\x6b\x67\xf5\xe6\xf8\x51\x2b\x17\xfd\xa5\x9b\x5e\xd6\x2e\x44\x7b\x67\xbd\x72\xc7\x55\x5f\x7b\x64\xc6\x90\x72\xa4\xcd\x1c\x2b\xb5\x0b\x1e\xae\x82\x01\x9e\xe2\x00\x99\x1d\x74\xec\xef\x55\x77\xae\xf4\x66\xec\x3f\x3f\x8c\x5c\xe4\x9d\x2f\x19\xf2\x9a\x83\x4f\x39\x4e\x46\xe8\x9c\xd2\x70\xd1\x5a\x67\x78\x9e\xa5\x1e\x9d\xe6\x64\x5a\x79\x0d\xee\x7c\x48\x29\xf8\x37\x28\xba\x45\x07\xec\xf5\x38\x62\x26\xec\x02\xc1\xe7\xf6\x47\xea\x96\x5d\xe7\x06\xc6\x86\xa7\x9d\x38\x0a\x14\x8f\xd6\xa3\x27\x78\x49\x7f\xb5\x78\x7c\x11\x5a\xd4\x41\x49\x0e\x38\x6e\xd6\xf2\x35\x72\x4a\xb1\x1a\x57\x45\x94\xa7\x2e\x42\x1a\xa2\x47\x84\x1c\xfe\x04\x00\x00\xff\xff\x32\x76\xd0\x1f\xe6\x06\x00\x00")

func wwwIndexJsBytes() ([]byte, error) {
	return bindataRead(
		_wwwIndexJs,
		"www/index.js",
	)
}

func wwwIndexJs() (*asset, error) {
	bytes, err := wwwIndexJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "www/index.js", size: 1766, mode: os.FileMode(420), modTime: time.Unix(1502233179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"www/index.html": wwwIndexHtml,
	"www/index.js": wwwIndexJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"www": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{wwwIndexHtml, map[string]*bintree{}},
		"index.js": &bintree{wwwIndexJs, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
