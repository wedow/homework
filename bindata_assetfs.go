// Code generated by go-bindata.
// sources:
// www/index.html
// www/index.js
// DO NOT EDIT!

package main

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _wwwIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x53\xb1\x92\xdb\x20\x10\xad\xd1\x57\x10\xf5\x36\x67\x67\xd2\x28\x48\xcd\x25\x33\x29\x32\xb9\x2b\x92\x22\x25\x46\xab\x83\x3b\x04\x0c\xac\x6c\x6b\x6e\xf2\xef\x19\x40\xf6\xc8\x89\x1b\x21\xd8\xf7\xf6\x3d\xbd\x45\xfc\xc3\x97\xa7\xc7\x9f\xbf\x9f\xbf\x52\x85\xa3\xe9\x2a\x7e\x59\x40\xf4\x5d\x45\x38\x6a\x34\xd0\x7d\x77\xb3\x30\x38\x3f\x59\xa0\xdf\xdc\x08\x27\x17\xde\x38\x2b\xa5\x8a\xf0\x88\xb3\x01\x8a\xb3\x87\xb6\x46\x38\x23\x93\x31\xd6\x5d\x45\x48\xda\x88\x00\x82\xbe\x57\x84\x90\x5e\x47\x6f\xc4\xdc\xd0\x83\x71\xf2\xed\x73\x3a\x52\xa0\x5f\x14\x36\x74\xf7\xe9\xc1\x9f\xf3\xc9\x49\xf7\xa8\x1a\xfa\xf1\x61\x39\xf8\x53\x55\x84\x6c\xa5\xb3\x08\x16\x4b\x9f\x93\xd2\x08\x9b\xe8\x85\x84\x86\xfa\x00\x99\x37\x8a\xf0\xa2\xed\x06\x9d\x4f\xdd\xd6\x5c\xef\x22\xd2\xf2\x7c\x5f\x21\x0d\x0c\xd8\xd0\xfd\xff\xd0\xc5\xad\x74\xc6\x85\xe4\x75\xba\x11\x28\xb4\x2b\x8b\x70\x96\xbf\xbe\xab\x38\x2b\x91\xf1\x83\xeb\xe7\x94\x8a\xda\xdd\x8f\x4d\xed\x52\x75\x70\x61\xa4\xd2\x88\x18\xdb\x1a\x7a\x8d\x2e\xe4\xc4\x78\xaf\x8f\x69\x25\xdc\x88\x03\x18\x3a\xb8\xd0\xd6\x53\x84\x60\xc5\x08\x75\xf7\x2b\x42\xa0\x3f\xc4\x08\x0d\x67\x19\x50\xb0\xda\xfa\x09\x57\x03\xa8\x69\x82\xaf\x88\x54\x4c\xe8\x06\x27\xa7\x98\x45\xd8\xa2\x72\x57\x2d\x35\xd8\xe4\x8e\x75\xf7\x9c\x02\x79\x2c\xe1\xdf\x4a\x5e\x47\x5b\x94\xd6\x24\xce\x2e\xc5\x5b\xb1\xb5\xcb\x38\x1d\x46\x7d\xf5\xb9\xec\x52\x2e\x2c\x05\x93\x5e\x2e\x2c\xb5\xcf\x2e\x22\x67\x6a\x7f\xf1\x4c\x75\xdf\xd6\x69\x58\x31\xa9\x15\xe4\xb2\xa6\xeb\x28\x83\xf6\x48\x63\x90\x6d\xad\x10\x7d\x6c\x18\x93\xbd\xdd\x7a\x67\xe6\x41\x1b\xb3\xd5\x8e\x1d\xf7\xec\xba\x1d\xb5\xdd\xbe\xe6\x4e\x85\xd9\xfd\xd3\x43\xdb\x1e\xce\x09\xb1\xbe\xe2\xaf\xe2\x28\x0a\x68\x4d\xe4\xac\x4c\x9f\xb3\xf2\x1b\xfd\x0d\x00\x00\xff\xff\x4e\xe7\x12\x28\x5e\x03\x00\x00")

func wwwIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_wwwIndexHtml,
		"www/index.html",
	)
}

func wwwIndexHtml() (*asset, error) {
	bytes, err := wwwIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "www/index.html", size: 862, mode: os.FileMode(420), modTime: time.Unix(1502234595, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wwwIndexJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x55\xc1\x6e\xe4\x36\x0c\x3d\x5b\x5f\xc1\x45\x0f\xb2\x01\x47\x7b\x1f\xc0\x3d\x6c\x1a\xa0\x28\x8a\x74\xd1\x6c\x4f\x8b\xa0\x50\x24\x3a\x56\x47\x23\xb9\xb2\x3c\xdb\x41\x76\xfe\xbd\xa0\x2c\x7b\x1c\xef\x26\x48\x7b\x9a\x11\x29\x92\x8f\x8f\xcf\x94\xf6\x6a\x3c\xa0\x8b\xe2\xc1\xeb\x93\xf0\xce\x7a\xa9\xa1\x81\x76\x74\x2a\x1a\xef\xca\x0a\x9e\x58\xd1\x62\x54\x5d\xc9\xdf\x47\xfc\x27\xf2\x4a\xc4\x0e\x5d\x19\x70\xe8\xa1\xf9\x11\xe8\x57\x90\xa3\xac\x36\x9e\x27\x56\x14\x16\x23\xf4\x7e\x88\x03\x34\xf0\xcb\xdd\x6f\xb7\xa2\x97\x61\xc0\x74\xa5\x62\x45\x61\x5a\x28\x93\x9b\x0e\x45\xfa\x27\x5a\x1f\x6e\xa4\xea\x92\x7d\x2a\xe0\x34\x86\x8f\x7e\x88\xc9\x54\x55\xac\x38\x57\xec\xcc\xd8\x02\xfd\xef\x11\xc3\xe9\x0e\x2d\xaa\xe8\x43\xc9\x05\x6a\x13\x7d\xe0\x95\xf0\x6e\x18\x1f\x0e\x26\x42\x03\xd3\x9f\x9b\xe4\x61\x6c\x6e\xef\x99\xb9\xc4\x1a\x7a\x19\xd0\xc5\x3f\x8d\x4e\x7d\xa3\xe8\x03\x1e\xd1\xc5\x9f\xb0\x95\xa3\x8d\x65\xc5\x58\x6a\x89\xc8\x82\x06\x50\xa8\x31\x50\xc0\x27\x19\x1e\xf1\x1b\x20\xad\x0f\x07\xf8\xec\xe4\x01\x1b\x22\xe8\xca\xb8\x7e\x8c\xf7\xbc\x9a\x72\x8c\x03\x86\xff\x94\x83\x02\xe8\x0f\x65\x60\x89\xba\x77\x64\x12\x47\x69\x47\x84\xaf\x5f\xe1\x5d\x9a\x61\x3a\x12\x9f\x01\xe3\x18\x1c\x48\x8b\x21\x96\xfc\xa3\x45\x39\x20\xb4\xc6\x5a\x78\xf0\xb1\x83\xd8\x21\xfc\x41\x18\xa4\xd3\x70\xed\x5d\x44\x17\xa1\x35\x68\xf5\xc0\xe7\x3e\xb5\x8c\x12\x9a\x34\xc9\xb9\xfa\x0e\x2e\x45\x6b\x56\x14\x6a\x8a\xdc\xc1\xa5\x38\x2b\xce\x19\xe0\x85\x4e\x56\x14\x94\x4c\x2c\x16\x68\x2e\x64\xb3\x8d\xc4\x6a\x2a\xd8\xa1\xd4\x18\x86\x1d\x38\xfc\x02\x3f\x4f\x87\xf2\x89\x67\xa4\x57\x9f\x4e\x3d\xf2\x1d\x70\xd9\xf7\xd6\x28\x49\xd3\x7c\xff\xd7\xe0\x1d\x3f\x57\x04\xeb\x80\xb1\xf3\x7a\x07\x9c\x34\xc3\xc9\x42\xf8\x76\x93\x08\x87\x18\x8c\x7b\x34\xed\xa9\x24\x4c\x49\x50\xff\x47\xd4\xdf\xd7\xf4\x56\xaf\xb9\x74\x1e\x53\x03\x9c\xcf\x02\x3e\xca\x90\xf2\xdc\x45\x1f\xc8\xf3\x74\x5e\x29\x73\x9b\x86\x2a\xa7\x91\x98\x23\x34\xb0\x68\x5f\x05\x94\x11\x6f\x2c\xd2\xa9\xe4\xda\x1c\x67\x7d\x1d\x30\xca\x3c\xbf\x37\xdc\xce\x63\x7c\xdb\xe5\x2e\xbc\x72\xaf\x0b\x49\x3e\x73\x79\x21\xfb\x1e\x9d\x2e\x39\x5c\x01\xaf\x53\xbf\x62\xd6\x52\x0d\x53\xec\xef\xd8\xdb\xd3\xaf\xc6\xed\x53\xab\xc2\x68\xfa\xc8\x33\xa2\x39\x3e\x79\xb2\x6d\xe5\x55\x56\x0e\xc3\xad\x3c\x24\x66\xb3\x91\x33\x56\x68\x73\x9c\x23\xb3\xb5\x5e\x18\xa9\xa1\x0b\xd5\x74\xe5\x59\x78\x92\x0a\x63\xc5\x32\x93\xcf\x19\xce\x3d\xb5\x6b\x8e\x6c\xd9\x57\xe2\xf9\x9e\xd8\x46\x2c\xde\xfb\x19\x83\x36\x47\x92\x19\xa0\x1d\x30\x45\xbc\xb4\xbc\x7e\x48\x4b\x90\x57\xb4\x79\xd6\x91\x6c\xad\x8d\x2d\x6b\x19\x06\x8d\xc6\x1a\xb7\x7f\x65\x38\x32\x8d\xd0\xb8\xfd\x32\x96\x94\x65\xb1\x7a\xa7\xac\x51\xfb\xf5\x0b\x80\x53\x8b\xdf\xd9\x85\xd3\x97\xe0\x83\x79\x34\x4e\xda\x75\xd5\x97\x36\x72\x0e\x99\x8e\xd0\x2c\xb1\x42\x59\xef\xf0\xd6\x6b\x2c\x63\xa0\xed\x95\x2f\x0e\x5f\x64\xff\x41\xaa\x7d\xc6\x4f\xaf\x48\x59\xd1\x67\x38\x65\xc8\x44\x53\x9c\x08\xd8\x5b\xa9\xf0\xba\x33\x56\x97\xd4\x4b\x9d\x2f\x2d\xc9\x94\x74\x0a\xed\x87\x31\x46\xef\x5e\xa1\xe8\x21\x5d\x48\x58\xd7\x11\x0b\x61\xd7\xc9\xf8\xad\xff\x42\xdd\x16\x35\x01\xc8\x80\x67\x49\xae\x02\xab\x8b\x77\xf5\x5e\x6d\xe9\x2f\xb6\x2f\xd5\xb4\x53\x8b\x6d\xad\x34\x96\x73\x6a\x99\xe6\xf9\x12\x41\x53\xc1\x3a\xc9\xa5\x9a\xf6\x75\x7e\x2e\xc8\xc2\xce\xff\x06\x00\x00\xff\xff\xf8\xed\x8b\x8f\x17\x08\x00\x00")

func wwwIndexJsBytes() ([]byte, error) {
	return bindataRead(
		_wwwIndexJs,
		"www/index.js",
	)
}

func wwwIndexJs() (*asset, error) {
	bytes, err := wwwIndexJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "www/index.js", size: 2071, mode: os.FileMode(420), modTime: time.Unix(1502234441, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"www/index.html": wwwIndexHtml,
	"www/index.js": wwwIndexJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"www": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{wwwIndexHtml, map[string]*bintree{}},
		"index.js": &bintree{wwwIndexJs, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
