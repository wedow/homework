// Code generated by go-bindata.
// sources:
// www/index.html
// DO NOT EDIT!

package main

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _wwwIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x55\x4d\x6f\xdc\x36\x10\x3d\x4b\xbf\x62\xaa\x1e\x28\x01\xbb\x12\x6c\xa0\x17\x55\xd2\x25\x31\x10\x14\x45\x1c\x20\xe9\xa1\x28\x7a\xa0\xa5\x51\x44\x87\x22\x59\x92\x92\x23\x04\xfe\xef\x05\x3f\xb4\xde\xcd\x87\x61\xe4\xa4\x25\xe7\xcd\xcc\xe3\x9b\xc7\x65\xf3\xcb\xeb\xdb\x57\x1f\xfe\x7e\x77\x03\x93\x9d\x79\x97\x36\xfb\x07\xe9\xd0\xa5\x49\x63\x99\xe5\xd8\xfd\x29\x37\xca\xed\x76\x2b\x10\xde\xc8\x19\x1f\xa4\xfe\xd4\x54\x21\x94\x26\x8d\xb1\x1b\x47\xb0\x9b\xc2\x36\xb3\xf8\xd9\x56\xbd\x31\x59\x97\x26\x89\x5b\x50\x8d\x14\xbe\xa4\x49\x92\x0c\xcc\x28\x4e\xb7\x1a\xee\xb8\xec\x3f\xfd\x9e\x26\xc9\x63\x9a\x26\x49\xd9\x4b\x61\x51\xd8\x00\x7a\x98\x98\xc5\xa3\x51\xb4\xc7\x1a\x94\x46\x07\x4b\x66\xaa\x3f\x32\x71\xb4\x52\xd5\x70\xf5\x9b\xfa\x1c\x72\x93\xa6\xf2\x9d\xbb\xb4\xa9\x02\xdd\xe6\x4e\x0e\x9b\x63\x34\x5d\x7d\x9f\xf2\x74\xe5\xa2\xa3\xd4\xb3\xa3\xd7\x0c\x6c\x75\xdf\xa4\xe1\xf4\x0e\x39\x8c\x52\xb7\xd9\x62\x50\x0b\x3a\x63\xd6\xfd\x65\x50\xd7\x4d\xe5\x63\x01\xc6\x84\x5a\xec\xd9\x41\x33\x70\xc8\xb3\x1c\xa0\x8b\x95\xa3\xec\x17\xe3\xeb\x57\xb1\xc1\x77\x1b\xb9\x02\x47\x5f\x31\xeb\xde\x49\x63\xe1\x55\xd0\xe1\xb2\xe5\x49\xc2\xd0\xe9\x3c\xa9\xa9\xf6\xe0\x65\xb3\x73\x96\x66\xb9\x9b\xd9\x89\x67\x5c\x39\x0d\xaa\x28\xc2\x4e\xad\x99\xae\x3d\x0b\xd3\x54\xd3\xf5\xce\x19\xd8\xd0\x66\xca\xed\xba\x6e\x01\x19\xbf\x6e\xec\xbd\x66\xca\x82\xd1\x7d\x9b\x4d\xd6\x2a\x53\x57\x55\x3f\x88\x52\x49\xbe\x8d\x8c\xf3\x92\xc9\x6a\xbd\xae\x4e\xcb\x99\x89\xf2\xde\x57\x0a\x99\xdd\x53\x8d\x33\xef\xdc\xd3\x95\x86\x5d\x6f\xa1\x41\xf6\xcb\x8c\xc2\x96\x6e\xb4\xa5\x14\x5c\xd2\x01\x5a\x18\x17\xd1\x5b\x26\x45\x5e\x04\xdb\x8c\x68\xfb\x29\x27\x5e\x11\x52\x94\x76\x42\x91\x6b\x34\x0a\xda\x0e\xdc\xb7\x74\x81\xbc\xf8\x2a\xe2\x53\x13\x8e\x16\xfc\x21\xa1\x85\x3f\xde\xdf\xbe\x2d\x15\xd5\x06\x3d\xa8\xf0\x00\x36\x42\xee\x01\x61\x99\xf8\xdf\xe5\x28\xf5\x0d\xed\x27\x1f\x09\x6d\xc4\x80\xda\x69\xe8\xb7\x0a\x0f\x7e\x2c\x76\x9b\x9f\x0e\xf2\xdf\x82\x7a\x7b\x8f\x1c\x7b\x2b\x75\x4e\xdc\x1c\x48\x51\x4a\x11\x86\x73\x7e\x36\x8c\x87\xc3\x52\x69\x5c\x51\xd8\xd7\x38\xd2\x85\xdb\xbc\x70\x05\x3d\x6f\xa7\x0a\xb4\xf0\x5c\x71\xf8\xc7\x0f\xff\xc9\x39\xff\x92\x62\x4f\x77\xc6\x7d\x59\xfa\x6e\x71\x97\xbc\x67\x0f\xd4\x52\x68\xa3\x8a\x3b\xa0\xf6\x45\xcb\x95\xf2\x05\x0f\x3e\x12\xef\x77\xed\xc9\x86\x80\x97\x26\xfd\x66\x70\x87\x50\xca\x5d\x66\xd4\xa6\x06\x81\x0f\xf0\x26\x2c\xf2\x2f\x24\xde\x8f\xe3\x87\x4d\x21\xa9\x81\x50\xa5\x38\xeb\xa9\x93\xaa\xba\x37\x52\x90\xc7\x22\x34\x9c\xd1\x4e\x72\xa8\x81\xb8\x39\x90\xb0\xe7\x7a\xd7\x61\xbc\xc6\x6a\x26\x3e\xb2\x71\xcb\xdd\x01\xe2\x98\x7e\xce\x32\x3f\x72\xcc\xd7\x5e\x38\x51\x08\xc7\x87\x16\x08\xb9\xb4\xc7\x3e\xf4\x6f\x6c\x14\x3a\x7a\xb9\xd9\x7a\x3e\xab\x5e\x23\xb5\x78\xc3\xd1\xad\x72\x32\xb0\xf5\x69\xae\x33\x5a\x1a\xa7\xf3\x22\xfc\xfe\x17\xfc\x42\xf8\xa4\x9f\x41\x4e\x3a\x5a\x64\x27\x51\x52\xa5\x50\x0c\x39\x81\x23\x90\x83\xd7\xad\xdc\xdd\xe2\x4b\xc6\xee\x3b\xce\x03\xe2\xde\x45\xbc\xe7\xd4\x98\xb7\x74\x76\xfa\x65\x71\x33\x73\x80\xf0\xba\xac\x7b\x81\x18\x3a\x9c\x64\x38\xc0\xa4\x03\xa7\x1f\x39\xfd\x57\x7f\xa7\x49\xe1\x6e\x9a\xaf\x31\xb0\xb5\x38\xbd\x32\xf1\xef\xaa\xa9\xc2\xfb\xd2\x54\xe1\x91\xfc\x3f\x00\x00\xff\xff\x2b\x17\xda\xca\x3c\x07\x00\x00")

func wwwIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_wwwIndexHtml,
		"www/index.html",
	)
}

func wwwIndexHtml() (*asset, error) {
	bytes, err := wwwIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "www/index.html", size: 1852, mode: os.FileMode(420), modTime: time.Unix(1502226895, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"www/index.html": wwwIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"www": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{wwwIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
