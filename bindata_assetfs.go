// Code generated by go-bindata.
// sources:
// www/index.html
// www/index.js
// DO NOT EDIT!

package main

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _wwwIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\x5d\x6b\xdb\x3c\x14\xbe\x96\x7f\x85\x5e\x43\xe1\x1d\x2c\x56\x12\x56\xc6\x3c\xc5\x0c\xba\xc1\x2e\xc6\xda\x8b\xed\x62\x97\x8a\x7c\x52\x2b\xd5\x87\x91\x8e\xdb\x98\xd2\xff\x3e\x24\x39\xa9\xfb\x31\xb6\x9b\x28\x92\x9e\x8f\xe3\x73\x1e\x9b\xff\xf7\xf9\xf2\xe2\xc7\xaf\xab\x2f\xb4\x43\xa3\x9b\x82\x1f\x17\x10\x6d\x53\x10\x8e\x0a\x35\x34\xdf\xdc\x28\x34\x8e\x97\x16\xe8\x57\x67\xe0\xce\xf9\x1b\xce\xf2\x55\x41\x78\xc0\x51\x03\xc5\xb1\x87\x4d\x89\x70\x40\x26\x43\x28\x9b\x82\x90\xad\x6b\x47\x7a\x5f\x10\x42\x8c\x38\x2c\xee\x54\x8b\x5d\x4d\xcf\x97\x60\x3e\xe6\x33\x7f\xad\x6c\x4d\xc5\x80\x2e\x1e\x3c\x14\x84\x7c\x32\xd0\x2a\x41\xff\x37\xca\xce\xf1\x6f\xb2\x4a\x00\x89\xca\xd9\xb7\xb4\xd5\xf9\x80\xb4\x2a\xf4\x5a\x8c\x35\x55\x56\x2b\x0b\x8b\xad\x76\xf2\x26\xa9\x93\x89\xfe\xee\xc3\x59\xde\x3f\xb7\x4b\x7e\x0f\x05\x29\x08\x89\x45\x0b\x0f\x22\x8b\x9e\x34\x1f\xc5\x3a\x50\xd7\x1d\xd6\x74\x75\xbe\xec\x0f\xe9\x64\x52\x5f\x2d\x97\x67\xb9\xf6\x82\x10\x2d\xb6\xa0\x9f\x69\xbc\xa8\xeb\x91\x38\x29\x45\xf3\x85\xd0\xea\xda\xd6\xd4\x47\x9b\x93\x5e\x25\x9d\x45\xb0\x98\x25\xef\x3a\x85\xb0\x08\xbd\x90\x50\xd3\xde\xc3\xac\x87\x0b\x74\x7d\x2c\x2e\x2b\x66\x6e\xef\x02\xd2\xfc\x7b\x3f\x43\x6a\xd8\x61\x4d\xd7\x2f\xa1\xd3\xc3\x4b\xa7\x9d\x8f\x8f\x3e\x3c\x31\xc8\xb4\x13\x8b\x70\x96\x86\xde\x14\x9c\xe5\xa4\xf0\x38\xeb\x18\x86\x6e\xf5\x7a\x5a\xba\x55\xbc\xdd\x39\x6f\xa8\xd4\x22\x84\x4d\x09\xad\x42\xe7\x53\x50\x78\xab\x6e\xe3\x4a\x78\xee\xe1\xce\xf9\x4d\x39\x04\xf0\x56\x18\x28\x9b\x9f\x01\x3c\xfd\x2e\x0c\xd4\x9c\x25\x40\xc6\x2a\xdb\x0f\x38\xcb\x5d\x49\x23\x7c\x46\x4c\xb3\xde\x39\x39\x84\x64\xc2\x26\x97\x57\xdd\xa4\xc2\xb1\x6c\x2e\x14\x8e\xff\x66\x92\xf1\x7f\x95\x4d\xd3\x4d\x1a\x65\x73\x15\xfb\x7c\x91\x67\xfa\xd4\xe4\x14\xc0\xac\x3d\x27\x71\x76\xbc\x7c\x6a\x36\xaf\x2b\x0c\x5b\xa3\x4e\x95\x4d\xbb\xd8\x6e\x16\xfb\x1d\xff\x1c\x59\xdd\x3a\x55\x11\x38\xeb\xd6\xc7\x9a\xa9\x6a\x37\x65\xcc\x40\x88\x6e\x19\x39\xad\xf1\xe5\x96\x5e\xf5\x48\x83\x97\x9b\xb2\x43\xec\x43\xcd\x98\x6c\x6d\xd5\x3b\x3d\xee\x94\xd6\x95\x72\xec\x76\xcd\x4e\x5b\xa3\x6c\xb5\x4f\x4a\x99\xd9\x3c\xd3\x48\xec\x7d\xa8\xa4\x76\x43\xbb\xd3\xc2\x43\x25\x9d\x61\x62\x2f\x0e\x4c\xab\x6d\x60\xc6\x19\xb0\x58\xed\x03\x5b\x57\xef\xab\xe5\xe3\xfe\xcf\x9a\xca\xb6\x70\x88\x88\xf9\x47\x68\x2f\x6e\x45\x06\xcd\x89\x9c\xe5\xa0\x72\x96\x3f\x74\xbf\x03\x00\x00\xff\xff\x15\xca\x38\xb1\x00\x05\x00\x00")

func wwwIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_wwwIndexHtml,
		"www/index.html",
	)
}

func wwwIndexHtml() (*asset, error) {
	bytes, err := wwwIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "www/index.html", size: 1280, mode: os.FileMode(420), modTime: time.Unix(1502245136, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wwwIndexJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x55\xcd\x6e\xdc\x36\x10\x3e\x8b\x4f\x31\x41\x0f\x14\x91\x8d\x72\x5f\x40\x3d\xc4\x35\x50\x14\x85\x1b\xd4\x2e\x7a\x08\x8c\x80\x96\x46\x5e\x76\x29\x52\xa5\x46\xeb\x2e\x9c\xed\x33\xf5\x19\xfa\x64\xc5\x90\x92\x56\x96\xe3\x20\xe9\x69\x97\x33\xf3\xcd\x7c\xf3\xa7\xa9\x7d\x35\xb4\xe8\xa8\xb8\xf3\xf5\xb1\xf0\xce\x7a\x5d\x43\x09\xcd\xe0\x2a\x32\xde\xe5\x0a\x1e\x45\xd6\x20\x55\xbb\x5c\xbe\x25\xfc\x8b\xa4\x2a\x68\x87\x2e\x0f\xd8\x77\x50\x7e\x0f\xfc\x5b\xb0\x22\x57\x2b\xcd\xa3\xc8\x32\x8b\x04\x9d\xef\xa9\x87\x12\x7e\xba\xfe\xe5\xaa\xe8\x74\xe8\x31\x9a\x28\x91\x65\xa6\x81\x3c\xaa\xf9\x91\xc5\x7f\x45\xe3\xc3\xa5\xae\x76\x51\x9e\x02\xb8\x1a\xc3\x7b\xdf\x53\x14\x29\x25\xb2\x93\x12\x27\x21\x66\xea\x7f\x0e\x18\x8e\xd7\x68\xb1\x22\x1f\x72\x59\x60\x6d\xc8\x07\xa9\x0a\xef\xfa\xe1\xae\x35\x04\x25\xa4\x3f\x97\x51\x23\xc4\x94\xde\x13\x71\x8e\x1b\xe8\x74\x40\x47\x1f\x4d\x1d\xf3\xc6\xa2\x0b\x78\x40\x47\x3f\x60\xa3\x07\x4b\xb9\x12\x22\xa6\xc4\xc5\x82\x12\xb0\xa8\x86\xc0\x80\x1b\x1d\xee\xf1\x19\x91\xc6\x87\x16\x3e\x38\xdd\x62\xc9\x05\x7a\x63\x5c\x37\xd0\xad\x54\xc9\xc7\xd0\x63\xf8\x26\x1f\x0c\xe0\x3f\xb3\x87\xca\xd0\xb7\xb1\x60\x00\xa3\x45\x2c\xfc\x2b\x76\x58\x1c\xb4\x1d\x10\x3e\x7d\x82\x57\x71\x02\xce\x4f\x36\x4e\x4f\x6e\x4e\x40\x1a\x82\x03\x6d\x31\x50\x2e\xdf\x5b\xd4\x3d\x42\x63\xac\x05\xe3\x80\x76\x08\xbf\xf5\x18\x36\x70\x61\xe8\xb8\x01\xed\x6a\xb8\xf0\x8e\xd0\x11\x34\x06\x6d\xdd\xcb\xa9\x72\xb5\x26\x0d\x65\x9c\x8d\x29\x9f\x2d\x9c\x89\x6c\x44\x96\x55\x09\xb9\x85\x33\xa1\x28\x36\x74\xdc\xc2\x99\x95\xc8\x4e\x63\x22\xe7\xa6\x89\x2c\xe3\x00\xc5\x2c\x81\xf2\xdc\x52\xb1\x1a\xe4\x0d\x93\xd8\xa1\xae\x31\xf4\x5b\x70\xf8\x00\x3f\xa6\x47\xfe\x28\x47\xf6\x6f\x6e\x8e\x1d\xca\x2d\x48\xdd\x75\xd6\x54\x9a\x67\xe6\xed\x1f\xbd\x77\xf2\xa4\x98\x53\x8b\xb4\xf3\xf5\x16\x24\x4f\xa6\x64\x09\x73\xde\xa6\x51\xef\x29\x18\x77\x6f\x9a\x63\xce\x9c\xe2\xd8\xfe\x9f\xd5\xf9\xfc\xe6\xac\xb7\x62\x0c\x3d\xf6\xaf\x04\x29\xa7\x35\x39\xe8\x10\xfd\x5c\x93\x0f\xac\x79\x3c\x2d\xe6\x7f\xed\x86\x23\xc7\x36\x99\x03\x94\x30\x6f\x58\x15\x50\x13\x5e\x5a\xe4\x57\x2e\x6b\x73\x98\x66\xb0\x45\xd2\x63\x4f\xbf\xc2\x7a\x6c\xed\xd7\x19\xef\xc2\x17\xec\x76\x61\x1e\x29\x32\x2d\xf6\xa4\xdb\x8e\xd3\x86\x5c\xc2\x6b\x68\x7d\xb4\xe2\x94\x46\x60\xfd\x51\x93\x2a\x9a\xe0\xdb\x2b\xff\x90\x2b\x78\x0d\x52\xc9\x84\xb7\x3e\x35\x36\xc2\x8d\x03\x76\x90\x90\xbc\x5f\xaf\xd9\xa7\xd5\xb4\x3d\xcb\xad\x26\x43\x43\x8d\x51\x67\xbd\xbb\x5f\xea\xbc\xbb\x9f\x95\x0a\x6e\xb0\xed\x30\x68\x1a\x02\x2e\x8c\xe8\x2c\x65\xb3\x7f\xff\xb9\x90\x22\x9b\x2a\x59\xe8\xae\x43\x57\xe7\x22\xcb\x24\xfc\x0d\x71\xaa\x22\x6a\xda\x17\x16\xcc\x39\xf3\x63\x4a\x20\x6e\x49\xcc\xf6\x57\xec\xec\xf1\x67\xe3\xf6\xa9\x04\x71\x33\x94\x98\x36\x6b\x8a\x90\x92\x4c\xb2\x85\xb6\xb2\xba\xef\xaf\x74\x1b\xc7\x68\x14\x4a\x21\xb2\xda\x1c\x26\xe4\x28\xdd\xcc\xed\xdf\xc0\x2e\xa8\x64\xf2\x04\x1e\xf7\x42\x88\x6c\x1e\xc0\x0f\x23\xa1\x5b\xee\xad\x39\x88\xf9\x04\x14\x4f\x3f\xbd\x6b\xc4\xac\xbd\x9d\x38\xd4\xe6\xc0\x3b\x05\x68\x7b\x8c\x88\x97\xee\xc1\x77\xf1\xae\x48\xc5\x1f\xf3\x25\x52\x2c\x17\x61\x5d\xb7\x91\x46\x9c\x0f\xe3\xf6\x5f\x98\x44\x1d\xe7\xd5\xb8\xfd\x44\x4c\x46\x2f\xb3\xd4\xbb\xca\x9a\x6a\xbf\x3c\xaa\x98\x52\xfc\xcc\x79\x49\x6b\xef\x83\xb9\x37\x4e\xdb\x65\xd4\x97\x8e\xdc\x08\x49\x4f\x28\x67\x6c\x51\x59\xef\xf0\xca\xd7\x98\x53\xe0\x6f\xf8\x68\xd8\x3f\xe8\xee\x9d\xae\xf6\x23\x7f\x3e\xcc\xb9\xe2\x6f\x4e\xf2\x50\x04\xec\xac\xae\xf0\x77\x43\xbb\x9c\xf9\xcf\xc0\x4a\xbb\x0a\xed\xbb\x81\x28\xae\xca\x4b\xe5\xb8\x8b\x06\x91\xd7\x12\x31\x17\xe7\x22\x0a\x9f\xeb\xcf\x65\x5a\x33\x64\x02\x23\xb9\x69\xfc\x16\x40\x75\xd6\x2e\xce\xfd\xba\xd4\xd9\xfa\xd0\xa7\x63\x91\xad\x63\xc5\x16\x9c\x62\xca\xdc\xbb\x65\x31\x52\x90\x45\xb8\x55\x47\x9e\x1d\xe9\xa2\xf1\xd5\x10\x3d\xb2\xc3\xf1\x80\xb2\x5b\x71\x12\xff\x05\x00\x00\xff\xff\x17\x22\x5b\x98\x77\x09\x00\x00")

func wwwIndexJsBytes() ([]byte, error) {
	return bindataRead(
		_wwwIndexJs,
		"www/index.js",
	)
}

func wwwIndexJs() (*asset, error) {
	bytes, err := wwwIndexJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "www/index.js", size: 2423, mode: os.FileMode(420), modTime: time.Unix(1502243437, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"www/index.html": wwwIndexHtml,
	"www/index.js": wwwIndexJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"www": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{wwwIndexHtml, map[string]*bintree{}},
		"index.js": &bintree{wwwIndexJs, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
