// Code generated by go-bindata.
// sources:
// www/index.html
// www/index.js
// DO NOT EDIT!

package main

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _wwwIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x94\xcd\x6e\xdb\x38\x14\x85\xd7\xd4\x53\x70\x04\x04\x98\x01\xc6\xa2\x6d\x34\x28\xaa\xd0\x42\x81\xb4\x40\x17\x45\x93\x45\xbb\xe8\x92\xa6\xae\x23\x3a\xfc\x11\xc8\xab\xc4\x42\x90\x77\x2f\x48\xca\x8e\xf2\x53\xb4\x1b\xd3\x24\xcf\xf9\xce\x15\x79\x25\xfe\xcf\xa7\xab\xcb\xef\x3f\xaf\x3f\xd3\x0e\x8d\x6e\x0a\x7e\x1c\x40\xb4\x4d\x41\x38\x2a\xd4\xd0\x7c\x75\xa3\xd0\x38\x5e\x59\xa0\x5f\x9c\x81\x7b\xe7\x6f\x39\xcb\x5b\x05\xe1\x01\x47\x0d\x14\xc7\x1e\x36\x25\xc2\x01\x99\x0c\xa1\x6c\x0a\x42\xb6\xae\x1d\xe9\x43\x41\x08\x31\xe2\xb0\xb8\x57\x2d\x76\x35\x3d\x5f\x82\xb9\xc8\x6b\xfe\x46\xd9\x9a\x8a\x01\x5d\x5c\x78\x2c\x08\xf9\x68\xa0\x55\x82\xfe\x6b\x94\x9d\xeb\xff\xcb\x94\x00\x12\x95\xb3\xff\xd3\x56\xe7\x05\xd2\xaa\xd0\x6b\x31\xd6\x54\x59\xad\x2c\x2c\xb6\xda\xc9\xdb\x44\x27\x93\xfd\xdd\x87\xb3\x3c\x7f\x19\x97\xf2\x1e\x8b\x82\x90\x58\xb3\xf0\x20\x32\xf3\x84\x7c\x62\x75\xa0\x6e\x3a\xac\xe9\xea\x7c\xd9\x1f\xd2\xca\x04\x5f\x2d\x97\x67\x17\x47\x8c\x16\x5b\xd0\x2f\x18\xaf\xca\x7a\x32\x4e\xa4\x18\xbe\x10\x5a\xdd\xd8\x9a\xfa\x18\x73\xe2\x55\xd2\x59\x04\x8b\x19\x79\xdf\x29\x84\x45\xe8\x85\x84\x9a\xf6\x1e\x66\x47\xb8\x40\xd7\xc7\xe2\x32\x31\x7b\x7b\x17\x90\xe6\xdf\x87\x99\x52\xc3\x0e\x6b\xba\x7e\x2d\x9d\x1e\x5e\x3a\xed\x7c\x7c\xf4\xe1\x59\x40\xb6\x9d\x5c\x84\xb3\x74\xe7\x4d\xc1\x59\x6e\x14\x1e\xaf\x3a\xf6\x42\xb7\x7a\xbb\x59\xba\x55\xdc\xdd\x39\x6f\xa8\xd4\x22\x84\x4d\x09\xad\x42\xe7\x53\x9f\xf0\x56\xdd\xc5\x91\xf0\x7c\x86\x3b\xe7\x37\xe5\x10\xc0\x5b\x61\xa0\x6c\x7e\x04\xf0\xf4\x9b\x30\x50\x73\x96\x04\x59\xab\x6c\x3f\xe0\xac\xed\x4a\x1a\xe5\x33\x63\xba\xea\x9d\x93\x43\x48\x21\x6c\x4a\x79\x33\x4d\x2a\x1c\xcb\xe6\x52\xe1\xf8\x77\x21\x59\xff\x47\x6c\xba\xdd\xc4\x28\x9b\xeb\x78\xce\x97\xf9\x4e\x9f\x87\x9c\x1a\x30\xb3\xe7\x26\xce\x8e\x9b\xcf\xc3\xe6\x75\x85\x61\x6b\xd4\xa9\xb2\x69\x16\x8f\x9b\xc5\xf3\x8e\x7f\x8e\xae\x6e\x9d\xaa\x08\x9c\x75\xeb\x63\xcd\x54\xb5\x9b\x32\xf6\x40\x88\x69\x59\x39\x8d\xf1\xdd\x96\x5e\xf5\x48\x83\x97\x9b\xb2\x43\xec\x43\xcd\x98\x6c\x6d\xd5\x3b\x3d\xee\x94\xd6\x95\x72\xec\x6e\xcd\x4e\x53\xa3\x6c\xb5\x4f\xa4\xec\x6c\x5e\x30\x92\x7b\x1f\x2a\xa9\xdd\xd0\xee\xb4\xf0\x50\x49\x67\x98\xd8\x8b\x03\xd3\x6a\x1b\x98\x71\x06\x2c\x56\xfb\xc0\xd6\xd5\xfb\x6a\xf9\x34\xff\x3d\x53\xd9\x16\x0e\x51\x31\xff\x06\xed\xc5\x9d\xc8\xa2\xb9\x91\xb3\xdc\xa8\x9c\xe5\xef\xdc\xaf\x00\x00\x00\xff\xff\x16\x74\xf2\xac\xff\x04\x00\x00")

func wwwIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_wwwIndexHtml,
		"www/index.html",
	)
}

func wwwIndexHtml() (*asset, error) {
	bytes, err := wwwIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "www/index.html", size: 1279, mode: os.FileMode(420), modTime: time.Unix(1502246495, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wwwIndexJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x55\xcd\x6e\xe3\x36\x10\xbe\xeb\x29\x66\xd1\x03\x49\xc4\xab\xbd\x1b\x70\x0f\x4d\x03\xb4\x45\x91\x2e\x9a\x14\x3d\x2c\x82\x05\x23\x8e\x22\xb6\x14\xa9\x92\x23\xa7\x86\xe3\x3e\x53\x9f\xa1\x4f\x56\x90\x14\x65\xd9\x49\xda\xcd\xc9\xd6\xfc\x7c\xf3\xcd\x1f\x47\xb9\x66\xec\xd1\x52\x7d\xef\xd4\xae\x76\xd6\x38\xa9\x60\x03\xed\x68\x1b\xd2\xce\x02\x17\xb0\xaf\x00\x1e\xb5\x55\xee\xb1\x6e\x91\x9a\x8e\xb3\x0f\x84\x7f\x12\x13\x35\x75\x68\xb9\xc7\x30\xc0\xe6\x6b\x88\xbf\x75\x54\x70\x71\xa6\x89\x00\x00\x06\x09\x06\x17\x28\xc0\x06\x7e\xb8\xf9\xe9\xba\x1e\xa4\x0f\x98\x8c\x44\x32\xd0\x2d\xf0\x64\x20\x60\x9f\x2d\xeb\xd6\xf9\x2b\xd9\x74\xdc\xa3\x55\xe8\x3f\xba\x40\x02\x0e\x15\xc0\x41\x54\x87\xaa\x9a\xb9\xff\x31\xa2\xdf\xdd\xa0\xc1\x86\x9c\xe7\xac\x46\xa5\xc9\x79\x26\x6a\x67\xc3\x78\xdf\x6b\x82\x0d\xe4\x3f\x57\x49\x53\x55\x73\x7e\x4b\x31\x70\x5c\xc1\x20\x3d\x5a\xfa\x5e\xe5\xbc\xb1\x1e\x3c\x6e\xd1\xd2\xb7\xd8\xca\xd1\x10\x17\x55\x95\x53\x69\x9c\x25\xb4\x11\x19\xeb\x66\xf4\xd1\xe9\x56\xfa\x07\x7c\xc6\xa6\x75\xbe\x87\x4f\x56\xf6\xb8\x89\xd5\x79\xaf\xed\x30\xd2\x1d\x13\xf5\x56\x9a\x11\x27\xb4\x31\xa0\x8f\x26\x6f\x82\x2b\x4e\xe7\x60\x8d\xa6\xdd\x9b\x80\xa2\xc3\x11\xa4\xca\xad\x78\x37\x73\x7a\x7a\x82\x77\x25\xdd\xf4\x5f\xd3\x4e\x4c\x5d\xf5\x48\xa3\xb7\x65\x3e\xa4\x41\x4f\x9c\x7d\x34\x28\x03\x42\xab\x8d\x01\x6d\x81\x3a\x84\x5f\x02\xfa\x15\x5c\x6a\xda\xad\x40\x5a\x05\x97\x13\x5e\xab\xd1\xa8\xc0\xe2\x04\x1c\x4a\x69\x95\x24\x09\x1b\xd8\xcf\x55\x59\x95\x6a\xaf\x72\x6e\x87\xc2\x71\xd1\xac\xe4\x55\x67\xc1\x67\x1d\x67\xb8\x28\xb3\xf9\x4b\x13\xbc\x9a\x92\xe8\x50\x2a\xf4\x61\x0d\x16\x1f\x8b\xe1\x77\x59\xc6\xf7\x6c\xa2\xfa\xfe\x76\x37\x20\x5b\x03\x93\xc3\x60\x74\x23\xe3\xf8\x7c\xf8\x2d\x38\xcb\x0e\x62\x95\x60\x7a\xa4\xce\xa9\x35\xb0\x38\xbc\x2c\xcb\xe2\x5a\xad\xf3\xbc\x07\xf2\xda\x3e\xe8\x76\xc7\x23\xd5\x94\xf1\x1b\x57\xe8\xb8\x06\xfc\x7c\x83\xc4\x1c\x2d\x77\x11\x36\xc0\xd8\xbc\x29\x8d\xb3\x21\x6f\xdf\x0d\x39\x1f\x95\xfb\xc3\x62\x09\x8e\xb8\x79\x03\x73\x73\x63\x2b\x48\xf7\x18\x48\xf6\x43\xc4\x03\xce\xe0\xa2\xd4\xa7\x77\x71\xf5\x92\x79\xdd\x78\x94\x84\xea\xb3\x24\x51\xb7\xde\xf5\xd7\xee\x91\x0b\xb8\x00\x26\xd8\x84\x63\x5c\x2e\x58\x82\xd1\x16\x22\x50\x76\x8d\xfd\xbc\x88\xd8\x46\xd2\xfa\x28\x37\x92\x34\x8d\x0a\x93\xce\x38\xfb\xb0\xd4\x39\xfb\x30\x2b\x05\xdc\x62\x3f\xa0\x97\x34\x7a\x5c\x18\xd1\x51\x1a\xcd\xfe\xf9\xfb\xb2\x70\xe9\x91\xe4\x34\x62\xf3\x0b\x92\x33\xb8\x32\x98\x92\x62\x4a\x6f\xd3\x48\x16\xd3\x5a\x0e\x03\x5a\xc5\x53\x91\x19\xfc\x05\x53\x77\x53\xa4\x79\x4a\x93\x68\xae\x58\xfe\x2c\x89\xe7\xaf\x1c\xe6\x67\x1c\xcc\xee\x47\x6d\x7f\xcf\xd5\xd3\x2a\x86\x7a\xe1\x61\xf9\x3f\x76\x93\x65\x21\x97\xeb\x99\x65\x4b\x75\x63\x64\x08\xd7\xf9\x71\x61\x93\x90\x95\x68\x9d\xff\x8f\x40\x9d\x67\x33\x2d\xa5\xb7\x5f\x40\x49\xe9\x6d\xa1\x33\xaf\x6c\x29\xe2\x0a\x3a\x5f\x6c\x4e\x38\xa5\x75\x89\x71\xe6\x01\xfd\x34\x15\xe6\x2e\x86\xd4\xdb\xea\x78\x1c\x8e\x1b\x5e\x5e\xa0\x33\xa7\x59\x7f\x57\x88\x28\xbd\x4d\xcb\x06\x68\x02\x4e\x4e\xaf\x9d\x8e\xaf\xd2\xdd\x61\x22\x3e\xfb\x27\xce\xd5\x72\x5f\xce\xda\x08\xbc\xb0\x49\xa3\x1e\x25\xaf\x57\x4a\xa6\x3a\x45\xa3\xc2\x8f\x25\xa0\xa3\xd8\xd9\xc6\xe8\x26\x62\x70\x14\xc7\xe5\x7f\xe1\x14\x95\xb3\x9a\xef\xdd\x32\xe8\xab\x17\xb1\x31\xce\xe2\xb5\x53\xc8\xc9\x8f\x98\xba\x3b\x8d\x9d\xb4\x0d\x9a\x6f\x46\xa2\xb4\xa5\xaf\xd1\xbf\x4f\x06\x2c\xc7\x5e\xfa\xcc\xd9\x5c\x26\xe1\x4b\x16\x8b\xc4\x52\x5e\x99\x54\xed\x71\x30\xb2\xc1\x5f\x35\x75\x3c\x16\x60\x22\x35\x69\xcb\x34\x2d\x80\xc4\x52\xbf\x38\xf1\x27\xe5\x82\x93\xd3\x1e\x2f\x7b\xde\xb3\x85\xeb\xf3\xc0\x51\x79\x98\x6a\x12\x5b\xb1\xb4\xc8\x4e\x27\xb1\xcf\xaa\xfc\xfc\x2a\xb7\xae\x19\x03\x9f\x8f\xdb\x74\x2c\x23\x74\x75\xa8\xfe\x0d\x00\x00\xff\xff\x0d\x40\x2d\x64\x7b\x09\x00\x00")

func wwwIndexJsBytes() ([]byte, error) {
	return bindataRead(
		_wwwIndexJs,
		"www/index.js",
	)
}

func wwwIndexJs() (*asset, error) {
	bytes, err := wwwIndexJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "www/index.js", size: 2427, mode: os.FileMode(420), modTime: time.Unix(1511638462, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"www/index.html": wwwIndexHtml,
	"www/index.js": wwwIndexJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"www": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{wwwIndexHtml, map[string]*bintree{}},
		"index.js": &bintree{wwwIndexJs, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
