// Code generated by go-bindata.
// sources:
// www/index.html
// www/index.js
// DO NOT EDIT!

package main

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _wwwIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x94\xcd\x6e\xdb\x38\x14\x85\xd7\xd4\x53\x70\x04\x04\x98\x01\xc6\xa2\x6d\x34\x28\xaa\xd0\x42\x81\xb4\x40\x17\x45\x93\x45\xbb\xe8\x92\xa6\xae\x23\x3a\xfc\x11\xc8\xab\xc4\x42\x90\x77\x2f\x48\xca\x8e\xf2\x53\xb4\x1b\xd3\x24\xcf\xf9\xce\x15\x79\x25\xfe\xcf\xa7\xab\xcb\xef\x3f\xaf\x3f\xd3\x0e\x8d\x6e\x0a\x7e\x1c\x40\xb4\x4d\x41\x38\x2a\xd4\xd0\x7c\x75\xa3\xd0\x38\x5e\x59\xa0\x5f\x9c\x81\x7b\xe7\x6f\x39\xcb\x5b\x05\xe1\x01\x47\x0d\x14\xc7\x1e\x36\x25\xc2\x01\x99\x0c\xa1\x6c\x0a\x42\xb6\xae\x1d\xe9\x43\x41\x08\x31\xe2\xb0\xb8\x57\x2d\x76\x35\x3d\x5f\x82\xb9\xc8\x6b\xfe\x46\xd9\x9a\x8a\x01\x5d\x5c\x78\x2c\x08\xf9\x68\xa0\x55\x82\xfe\x6b\x94\x9d\xeb\xff\xcb\x94\x00\x12\x95\xb3\xff\xd3\x56\xe7\x05\xd2\xaa\xd0\x6b\x31\xd6\x54\x59\xad\x2c\x2c\xb6\xda\xc9\xdb\x44\x27\x93\xfd\xdd\x87\xb3\x3c\x7f\x19\x97\xf2\x1e\x8b\x82\x90\x58\xb3\xf0\x20\x32\xf3\x84\x7c\x62\x75\xa0\x6e\x3a\xac\xe9\xea\x7c\xd9\x1f\xd2\xca\x04\x5f\x2d\x97\x67\x17\x47\x8c\x16\x5b\xd0\x2f\x18\xaf\xca\x7a\x32\x4e\xa4\x18\xbe\x10\x5a\xdd\xd8\x9a\xfa\x18\x73\xe2\x55\xd2\x59\x04\x8b\x19\x79\xdf\x29\x84\x45\xe8\x85\x84\x9a\xf6\x1e\x66\x47\xb8\x40\xd7\xc7\xe2\x32\x31\x7b\x7b\x17\x90\xe6\xdf\x87\x99\x52\xc3\x0e\x6b\xba\x7e\x2d\x9d\x1e\x5e\x3a\xed\x7c\x7c\xf4\xe1\x59\x40\xb6\x9d\x5c\x84\xb3\x74\xe7\x4d\xc1\x59\x6e\x14\x1e\xaf\x3a\xf6\x42\xb7\x7a\xbb\x59\xba\x55\xdc\xdd\x39\x6f\xa8\xd4\x22\x84\x4d\x09\xad\x42\xe7\x53\x9f\xf0\x56\xdd\xc5\x91\xf0\x7c\x86\x3b\xe7\x37\xe5\x10\xc0\x5b\x61\xa0\x6c\x7e\x04\xf0\xf4\x9b\x30\x50\x73\x96\x04\x59\xab\x6c\x3f\xe0\xac\xed\x4a\x1a\xe5\x33\x63\xba\xea\x9d\x93\x43\x48\x21\x6c\x4a\x79\x33\x4d\x2a\x1c\xcb\xe6\x52\xe1\xf8\x77\x21\x59\xff\x47\x6c\xba\xdd\xc4\x28\x9b\xeb\x78\xce\x97\xf9\x4e\x9f\x87\x9c\x1a\x30\xb3\xe7\x26\xce\x8e\x9b\xcf\xc3\xe6\x75\x85\x61\x6b\xd4\xa9\xb2\x69\x16\x8f\x9b\xc5\xf3\x8e\x7f\x8e\xae\x6e\x9d\xaa\x08\x9c\x75\xeb\x63\xcd\x54\xb5\x9b\x32\xf6\x40\x88\x69\x59\x39\x8d\xf1\xdd\x96\x5e\xf5\x48\x83\x97\x9b\xb2\x43\xec\x43\xcd\x98\x6c\x6d\xd5\x3b\x3d\xee\x94\xd6\x95\x72\xec\x6e\xcd\x4e\x53\xa3\x6c\xb5\x4f\xa4\xec\x6c\x5e\x30\x92\x7b\x1f\x2a\xa9\xdd\xd0\xee\xb4\xf0\x50\x49\x67\x98\xd8\x8b\x03\xd3\x6a\x1b\x98\x71\x06\x2c\x56\xfb\xc0\xd6\xd5\xfb\x6a\xf9\x34\xff\x3d\x53\xd9\x16\x0e\x51\x31\xff\x06\xed\xc5\x9d\xc8\xa2\xb9\x91\xb3\xdc\xa8\x9c\xe5\xef\xdc\xaf\x00\x00\x00\xff\xff\x16\x74\xf2\xac\xff\x04\x00\x00")

func wwwIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_wwwIndexHtml,
		"www/index.html",
	)
}

func wwwIndexHtml() (*asset, error) {
	bytes, err := wwwIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "www/index.html", size: 1279, mode: os.FileMode(420), modTime: time.Unix(1502246495, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wwwIndexJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x56\xcd\x6e\xdc\x36\x10\xbe\xeb\x29\x26\xe8\x81\x24\xbc\x51\xee\x0b\x6c\x0f\x75\x0d\xb4\x45\xe1\x06\xb5\x8b\x1e\x02\x23\xa0\xc5\x91\xc5\x9a\x22\x55\x6a\xb4\xee\xc2\xd9\x3e\x53\x9f\xa1\x4f\x56\xf0\x4f\x92\x7f\xb6\x48\x72\xda\xd5\xfc\x7e\x33\xfc\x86\x43\xe5\x9a\xa9\x47\x4b\xf5\xad\x53\x87\xda\x59\xe3\xa4\x82\x1d\xb4\x93\x6d\x48\x3b\x0b\x5c\xc0\x63\x05\xf0\xa0\xad\x72\x0f\x75\x8b\xd4\x74\x9c\xbd\x23\xfc\x8b\x98\xa8\xa9\x43\xcb\x3d\x8e\x03\xec\xbe\x85\xf0\x5b\x07\x05\x17\xcf\x34\x21\x00\x80\x41\x82\xc1\x8d\x34\xc2\x0e\x7e\xba\xfa\xe5\xb2\x1e\xa4\x1f\x31\x1a\x89\x68\xa0\x5b\xe0\xd1\x40\xc0\x63\xb2\xac\x5b\xe7\x2f\x64\xd3\x71\x8f\x56\xa1\x7f\xef\x46\x12\x70\xac\x00\x8e\xa2\x3a\x56\xd5\x8c\xfd\xcf\x09\xfd\xe1\x0a\x0d\x36\xe4\x3c\x67\x35\x2a\x4d\xce\x33\x51\x3b\x3b\x4e\xb7\xbd\x26\xd8\x41\xfa\x73\x11\x35\x55\x35\xd7\xb7\x16\x03\xc7\x0d\x0c\xd2\xa3\xa5\x1f\x55\xaa\x1b\xeb\xc1\xe3\x1e\x2d\x7d\x8f\xad\x9c\x0c\x71\x51\x55\xa9\x94\xd0\x2f\xd8\x01\xd6\xcd\xe4\x83\xc7\xb5\xf4\x77\xf8\x02\x4a\xeb\x7c\x0f\x1f\xac\xec\x71\x17\x5a\xf3\x56\xdb\x61\xa2\x1b\x26\x72\x90\x69\x44\xff\x45\x41\x82\x43\xf8\xb3\x84\x68\x34\x7d\x19\x8e\xe0\x10\xdc\xab\xd4\xf1\x37\x21\x64\xbd\x97\x66\x42\xf8\xf4\x09\xde\x44\x1e\x2c\x9f\xc1\x3a\x7d\x8a\x7c\x8e\x1e\x69\xf2\xb6\x30\x42\x1a\xf4\xc4\xd9\x7b\x83\x72\x44\x68\xb5\x31\xa0\x2d\x50\x87\xf0\xdb\x88\x7e\x03\xe7\x9a\x0e\x1b\x90\x56\xc1\xb9\xb3\x84\x96\xa0\xd5\x68\xd4\x18\xf1\x1f\x4b\x33\x95\x24\x09\xbb\x9c\xa0\xd4\xb8\x85\x05\xda\x26\x6a\x9a\x14\x62\x0b\x0b\xc8\xac\xd0\x74\xd8\xc2\x82\xb5\xc4\x8e\x94\x5a\x0e\x34\xe6\xa9\x93\xe0\xa3\x0e\x3c\x2f\xca\x64\xfe\x1a\xcb\x37\x19\x55\x87\x52\xa1\x1f\xb7\x60\xf1\xa1\x18\xfe\x90\x64\xfc\x91\xe5\xe2\xde\x5e\x1f\x06\x64\x5b\x60\x72\x18\x8c\x6e\x64\xa0\xd8\xbb\x3f\x46\x67\xd9\x51\x24\xa4\x3d\x52\xe7\xd4\x16\x58\x20\x38\x4b\xb2\x50\xcd\x36\xcd\xc4\x48\x5e\xdb\x3b\xdd\x1e\x78\x80\x1a\x7b\xf4\x95\x63\x76\x6a\xca\x96\x51\x8a\xc3\x26\x66\x04\xf9\xd0\x77\xc0\xd8\x3c\x61\x7b\xe9\x63\xb0\x2b\x72\x3e\xa8\x1e\x8f\xab\xd1\x59\x22\xa5\xb9\x4d\x04\x09\xf9\x49\xf7\x38\x92\xec\x87\x10\x0d\x38\x83\xb3\xd2\xb1\xde\x85\x81\x8d\xe6\x75\xe3\x51\x12\xaa\x8f\x92\x44\xdd\x7a\xd7\x5f\xba\x07\x2e\xe0\x0c\x98\x60\x39\x8e\x71\xa9\x85\x31\x8c\xb6\x10\x02\x25\xd7\x40\xfa\xb3\x10\xdb\x48\xda\x2e\x72\x23\x49\xd3\xa4\x30\xea\x8c\xb3\x77\x6b\x9d\xb3\x77\xb3\x52\xc0\x35\xf6\x03\x7a\x49\x93\xc7\x95\x11\x2d\xd2\x60\xf6\xef\x3f\xe7\x05\x4b\x8f\x24\x33\x4d\xe7\x7b\x27\x55\x70\x61\x30\x16\xc5\x94\xde\x47\x5a\x17\xd3\x5a\x0e\x03\x5a\xc5\x63\x8b\x19\xfc\x0d\xf9\xbc\x63\xa6\xc2\xf2\x24\x9a\x3b\x96\x3e\x4b\xe1\x99\xdd\x31\xcd\xaf\x38\x98\xc3\xcf\xda\xde\xa7\xee\x69\x15\x52\xcd\xd7\x51\x1e\x8d\xcf\x40\x97\x2d\x0b\xb8\xd4\xcf\x24\x5b\xab\x1b\x23\xc7\xf1\x52\xf6\x91\x11\x59\xc8\x4a\xb6\xce\xff\x4f\xa2\xce\xb3\x19\x96\xd2\xfb\xcf\x80\xa4\xf4\xbe\xc0\xc9\x99\x36\x73\x13\x37\xd0\xf9\x62\xf3\x04\x53\x1c\xa0\x90\x67\x26\xe8\x87\xdc\x98\x9b\x90\x52\xef\xab\x65\xa5\x2c\x33\x5f\x6e\xb1\x67\x4e\xb3\xfe\xa6\x00\x51\x7a\x1f\xc7\x0f\xd0\x8c\x98\x9d\x4e\x2d\x9c\x6f\xe2\xb6\x62\x22\x2c\x8b\x27\xce\xd5\x7a\x5e\x9e\x1d\x23\xf0\x82\x26\x52\x3d\x48\x4e\x77\x4a\xa6\xfb\x5e\xdb\xfb\x82\x8f\xc5\x40\x8b\xd8\xd9\xc6\xe8\xe6\xfe\xc9\xee\x9e\xef\xec\x57\xd6\x58\xb9\x2b\xd2\xae\x5c\xa7\x3e\xb9\x4d\x1b\xe3\x2c\x5e\x3a\x85\x9c\xfc\x84\xf1\x8c\x33\xf9\xa4\x6d\xd0\x7c\x37\x11\xc5\x59\x3d\x55\xc4\x6d\x34\x60\x29\xf7\xda\x67\xae\xe9\x3c\x0a\x5f\xb3\x58\xca\xe3\x22\x5c\x76\x09\x54\xed\x71\x30\xb2\xc1\xdf\x35\x75\x3c\xb4\x21\x83\xca\xda\xc2\xa9\x55\x20\xb1\xd6\xaf\x9e\x07\xaf\x34\x0d\x9e\x3c\x0e\xc2\xdb\x20\xcd\xdc\x2a\xc0\xcb\xf4\x41\x79\xcc\x9d\x09\xc7\xb2\xb6\x48\x4e\x4f\x10\x3c\xeb\xf5\x8b\x25\x5f\xb7\xae\x99\x46\x3e\x2f\xcb\xbc\x7c\x43\xe8\xea\x58\xfd\x17\x00\x00\xff\xff\x76\x43\x4c\xd2\xbd\x09\x00\x00")

func wwwIndexJsBytes() ([]byte, error) {
	return bindataRead(
		_wwwIndexJs,
		"www/index.js",
	)
}

func wwwIndexJs() (*asset, error) {
	bytes, err := wwwIndexJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "www/index.js", size: 2493, mode: os.FileMode(420), modTime: time.Unix(1511500961, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"www/index.html": wwwIndexHtml,
	"www/index.js": wwwIndexJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"www": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{wwwIndexHtml, map[string]*bintree{}},
		"index.js": &bintree{wwwIndexJs, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
