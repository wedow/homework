// Code generated by go-bindata.
// sources:
// 1_initialize_schema.down.sql
// 1_initialize_schema.up.sql
// 2_add_username.down.sql
// 2_add_username.up.sql
// bindata.go
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __1_initialize_schemaDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\x29\xca\x2f\x50\x28\x49\x4c\xca\x49\x55\x28\xc8\x2f\x2e\x29\xb6\xe6\x02\x04\x00\x00\xff\xff\xf6\x8d\x0d\x67\x12\x00\x00\x00")

func _1_initialize_schemaDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__1_initialize_schemaDownSql,
		"1_initialize_schema.down.sql",
	)
}

func _1_initialize_schemaDownSql() (*asset, error) {
	bytes, err := _1_initialize_schemaDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1_initialize_schema.down.sql", size: 18, mode: os.FileMode(420), modTime: time.Unix(1501615514, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __1_initialize_schemaUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x1c\xcc\xcd\x0d\xc2\x30\x10\x44\xe1\xf3\xba\x8a\x39\x26\x12\x1d\x50\x0c\xda\xc4\x03\xb2\xf0\x9f\xec\x41\x90\xee\x51\x72\x7c\xef\xf0\xed\x83\x2e\x42\xbe\x65\xa2\xb7\xa9\x89\x25\x58\x8a\x30\xb3\x2d\xbd\x26\x47\xf2\x8c\x3e\x52\xf1\x71\xe0\xcd\xe3\x16\x6c\x6f\x55\xac\x82\x89\x3f\x9d\x7d\x19\xf1\xe1\xe7\x4a\x85\x53\x5e\x3a\x22\x9f\xfe\xc9\x42\x6d\xdf\x65\x0d\xeb\x3d\xfc\x03\x00\x00\xff\xff\x7b\xca\x9f\x3d\x6b\x00\x00\x00")

func _1_initialize_schemaUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__1_initialize_schemaUpSql,
		"1_initialize_schema.up.sql",
	)
}

func _1_initialize_schemaUpSql() (*asset, error) {
	bytes, err := _1_initialize_schemaUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1_initialize_schema.up.sql", size: 107, mode: os.FileMode(420), modTime: time.Unix(1501782884, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __2_add_usernameDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x28\xc8\x2f\x2e\x29\x56\x70\x09\xf2\x0f\x50\x70\xf6\xf7\x09\xf5\xf5\x53\x28\x2d\x4e\x2d\xca\x4b\xcc\x4d\xb5\x06\x04\x00\x00\xff\xff\x0e\xc3\x3d\x81\x27\x00\x00\x00")

func _2_add_usernameDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__2_add_usernameDownSql,
		"2_add_username.down.sql",
	)
}

func _2_add_usernameDownSql() (*asset, error) {
	bytes, err := _2_add_usernameDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "2_add_username.down.sql", size: 39, mode: os.FileMode(420), modTime: time.Unix(1502225944, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __2_add_usernameUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\x2b\x0e\x80\x30\x10\x04\xd0\xab\x8c\xeb\x21\x50\x0b\x5d\xd4\xd0\x26\x64\x9a\x60\x11\x95\x7c\xc2\xc2\xfd\x79\x46\xf9\x0a\xd9\x48\xc7\x7d\xc5\x1b\xb0\x9c\x31\x55\xb6\xa5\xe0\x8b\xfe\x9c\xfb\xd1\x21\xdf\x84\x52\x85\xd2\x48\x64\x9f\xad\x51\x48\x69\xf8\x03\x00\x00\xff\xff\x56\x2b\xfb\x79\x3f\x00\x00\x00")

func _2_add_usernameUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__2_add_usernameUpSql,
		"2_add_username.up.sql",
	)
}

func _2_add_usernameUpSql() (*asset, error) {
	bytes, err := _2_add_usernameUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "2_add_username.up.sql", size: 63, mode: os.FileMode(420), modTime: time.Unix(1502225935, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x57\x5b\x6f\xdb\x38\x13\x7d\x16\x7f\x05\x6b\xa0\x85\xf4\xc1\x9f\x2d\xc9\xba\x1a\xc8\x4b\x9b\x2e\xd0\x87\x6d\x81\x6d\xfb\xb4\xb3\x30\x28\x89\x74\x89\xb5\x25\x57\x92\xdb\x49\x82\xfc\xf7\xc5\x90\x72\xe2\x64\x7d\x69\xb3\xe9\x83\x62\xde\x66\x78\x86\x3a\x87\x47\x99\x4e\xf9\x9b\xa6\x92\x7c\x29\x6b\xd9\x8a\x5e\x56\xbc\xb8\xe2\xcb\xe6\xff\x85\xae\x2b\xd1\x8b\x09\x9b\x4e\x79\xd7\x6c\xdb\x52\x76\x73\x6a\x07\x0b\x5d\xeb\x5e\x8b\x95\xbe\x96\x8b\xae\xfc\x22\xd7\x62\x52\x35\xdf\xeb\x49\xf7\x75\x75\x6c\x7e\xbb\xd9\xcd\x86\x0b\x51\x55\x8b\x6d\x27\xdb\x5a\xac\xe5\x83\xc0\x47\x53\xf7\x31\x3b\x24\xcb\x86\x7a\x97\x1f\xf8\xfb\x0f\x9f\xf8\xdb\xcb\x77\x9f\x5e\x30\xb6\x11\xe5\xdf\x62\x29\xf9\x5a\x2f\x5b\xd1\xeb\xa6\xee\x18\xd3\xeb\x4d\xd3\xf6\xdc\x65\xce\xa8\xb8\xea\x65\x37\x62\xce\xa8\x6c\xd6\x9b\x56\x76\xdd\x74\x79\xad\x37\x34\xa0\xd6\x3d\xfd\xe8\xc6\xfe\x9d\xea\x66\xdb\xeb\x15\x75\x1a\x13\xb0\x11\xfd\x97\xa9\xd2\x2b\x49\x0d\x1a\xe8\xfa\x56\xd7\x4b\x33\xd7\xeb\xb5\x1c\x31\x8f\x31\xb5\xad\xcb\x1d\xbc\x3f\xa4\xa8\x5c\x6a\xf0\x3f\xff\xa2\x6d\xc7\x9c\xca\xe0\x36\xcc\xe3\xee\x6e\x54\xb6\x6d\xd3\x7a\xfc\x86\x39\xcb\x6b\xd3\xe3\xf3\x0b\x4e\xa8\x26\xef\xe5\x77\x4a\x22\x5b\xd7\xc0\xa6\xfe\xeb\xad\x52\xb2\x35\x69\x3d\x8f\x39\x5a\x99\x80\x17\x17\xbc\xd6\x2b\x4a\xe1\xb4\xb2\xdf\xb6\x35\x75\xc7\x5c\xad\xfb\xc9\x5b\xca\xae\xdc\x11\x25\xe2\x2f\xbf\xce\xf9\xcb\x6f\x23\x8b\xc4\xec\xe5\x31\xe7\x96\x31\xe7\x9b\x68\x79\xb1\x55\xdc\xee\x63\x37\x61\xce\xc2\xc2\xb9\xe0\xba\x99\xbc\x69\x36\x57\xee\xab\x62\xab\xc6\x7c\x79\xed\x31\xa7\x5c\xbd\xdd\x21\x9d\xbc\x59\x35\x9d\x74\x3d\xf6\x5c\x78\x28\x8d\xcd\x7f\x24\x91\x6c\x5b\x8b\x7b\x18\x2c\xb6\x6a\xf2\x9a\xa0\xbb\xde\x98\x56\xb0\x5b\xc6\xfa\xab\x8d\xe4\xa2\xeb\x64\x4f\x47\xbe\x2d\x7b\xca\x62\xea\x1b\xde\x07\x73\x74\xad\x1a\xce\x9b\x6e\xf2\x9b\x5e\xc9\x77\xb5\x6a\xee\xe2\x86\x57\xb8\x1b\xdf\xcb\x60\xde\x21\xe7\xc3\x6b\x64\x4e\xa7\xaf\x4d\x5f\xd7\x7d\x12\x31\x67\x4d\xca\xe1\x77\x49\x7f\x6f\x2a\x69\x06\x3f\xe9\xb5\xe4\x44\x93\x09\xb5\x68\x1f\x43\x15\x57\xe9\xc7\x7b\x79\xfc\xbd\x58\x4b\xd7\x1b\x76\xa0\x3d\x87\x2a\x95\x9e\xd0\xee\xec\xf6\x44\xec\x47\x7d\x4d\xb1\x06\xcd\xc3\x50\x02\x7a\x32\x94\xb0\xba\xde\x3e\xf2\x87\x09\xa8\xb4\x73\x09\xa8\x38\xd7\xbb\x2f\xf4\x5f\x19\x86\xea\x8f\x27\x79\xd7\x5d\xea\xd6\xf5\x78\xd1\x34\xab\xfd\x68\xb1\xea\xce\x54\x7e\xd5\xd9\xc2\x65\xab\x44\x29\x6f\x6e\xf7\xa2\x07\x4a\x10\xcb\x17\x8b\x03\xf7\xd1\x65\xf3\xbd\xfe\xf8\x75\xc5\x2f\x06\x6a\xb8\x23\xc0\x40\x01\x66\x05\xa0\x9f\x01\xfa\xfe\xe1\x47\x29\xc0\x48\x00\x86\x39\x60\x49\xbf\x0a\x30\xf6\x01\xc3\x0c\x30\xca\x01\xa3\xd2\x8e\x53\x3b\x8e\xed\x78\x99\xd9\x75\xa1\xb4\x71\x45\x02\x28\x13\x40\x3f\x04\xf4\xa3\x87\xb9\xcd\x93\x00\x66\x15\xa0\x5f\x01\x26\x29\x60\x10\xee\x63\x18\xed\x2e\x9d\x13\x65\x0d\xca\x38\x74\xe3\xec\xf4\xb3\x77\x63\x31\xc7\x39\x75\x46\x63\xe6\x38\xa3\x53\x57\xfe\x68\xcc\x1c\xef\x8e\xe0\x27\x32\x11\xa2\xff\x19\x81\xee\x23\x32\x0a\xbd\xbb\x06\xcf\x57\x75\xee\xce\xb9\xbb\x2a\x8c\xd8\xe7\x17\x8f\x89\x73\x43\x92\x9a\xf3\x33\x25\x71\x52\xcf\x9c\x07\xd9\x98\x93\x0c\xe6\xfb\x2a\x71\xa3\xd0\xf7\xcc\x38\x91\x7b\x6e\xc9\xff\xb9\xd6\xe8\x06\xb1\x1f\x24\x41\x1c\x07\xd1\x98\xfb\xde\x2d\x73\x04\x01\x78\x65\x6a\xbe\x31\x85\xce\xf9\x50\x2f\xa1\x9b\x9b\xbf\xb7\x77\x6f\x45\x8c\xcf\x12\xf7\xf3\xe6\xa9\xb4\x0d\x88\x9a\xf4\x0c\xd4\x2a\x43\xc0\x99\x0f\x18\xf8\x80\x51\x04\x28\x03\x40\x35\x03\x2c\x04\x60\x26\x00\x67\x39\x60\x98\x58\xfa\x05\x95\xa5\xb9\x5f\x02\x56\x02\xb0\x24\xda\xd2\xda\x10\x50\xf9\x80\xb9\x02\x94\x25\x60\x14\x00\xe6\x3e\xa0\x94\x80\x71\x00\x98\x86\x80\x69\x09\x28\x95\x5d\x27\x2b\xc0\x6c\x66\xa5\x10\x85\x80\x85\x04\x4c\x62\x40\x41\xed\x14\x50\xe4\x80\x19\xed\x1b\x03\xc6\xd9\x80\xc3\x07\x2c\x28\xa6\x02\x2c\x2a\x8b\x29\x4a\x01\x55\x08\x98\x95\x80\x33\xda\x8b\x70\xd0\x7e\x01\xa0\xf4\x6d\x8d\x72\x06\x18\x24\x80\x49\x09\x98\x28\x2b\x47\x51\x02\x66\xa1\xdd\x63\xa6\x00\xf3\x0a\x30\xad\x00\x83\xdc\xc6\xd3\x19\xc8\xd4\x4a\x3c\x23\x0c\x33\xc0\x58\x02\xce\x48\xea\xa1\xad\x53\x49\xc0\x32\xb7\xf8\x93\x0a\xb0\x52\xb6\x06\x3a\x53\x59\x00\xce\x2a\x40\x55\xda\xf3\x79\x2c\xed\xb4\xb0\xd7\x03\xe5\xa1\x75\x49\xf1\xc3\xd2\x36\x2f\xfe\x79\x84\x6d\x52\x1d\x95\xb5\xfd\xea\x3a\x2f\x6a\x93\xe5\xa9\x92\xde\xaf\xe6\x57\x0a\x7a\x57\xcc\x4e\xce\x7e\xfa\xd3\x7a\x4e\xb3\x30\xcb\x9e\x47\xcf\x0f\xbf\x6f\xff\x8b\x07\x91\xb0\x14\x89\x30\xb7\xa4\x27\xf2\x91\x08\x28\x8e\xfa\x69\x64\x05\x42\xed\x63\x3e\x14\x27\x80\xa9\x6f\x73\xd0\x5a\x7f\xf0\x32\x1a\x23\x0f\x52\xe9\x30\x17\xdb\x87\xc4\x40\x79\x48\x88\x91\xb4\xbf\xc6\xeb\x0a\x7b\xb1\x44\x24\x50\x12\x42\x72\xd8\xd7\x7c\x12\xce\xcc\x12\x3f\x0b\x00\xc3\xf4\x30\xf9\x0f\x9e\xd2\x13\x98\x7f\x30\x8f\xa1\xfd\x91\x7f\x41\x1e\x71\xfe\x60\xfc\x0f\x11\xfe\x54\x05\xcf\xc5\xf6\xa3\x35\x0c\x54\x9f\xe5\x3f\xcb\xf4\x30\x0c\xe3\x3c\xfa\x15\x4c\x7f\xba\x69\x11\x8f\x4a\xfa\xbe\x2a\x2c\x7f\x32\xff\xde\xb4\x68\xae\xf2\x01\x45\x61\x8d\x80\x2e\xdf\x30\x18\x8c\xaa\x00\x8c\xe9\x72\x1e\xd6\x90\x69\x24\x11\x60\x2e\x00\x13\x8a\x27\xa3\x8a\xad\x39\x91\x11\xd2\xa3\xc8\x0c\xe8\x62\x27\xee\xe7\x80\xbe\x00\xac\xa8\x4f\xda\x49\xad\x51\x94\x31\x60\x50\x00\x16\x64\x7a\x64\x3e\x83\xbe\xe8\x9b\x4e\xc4\xd6\x7c\xa8\x2e\x32\x09\x9a\x57\x05\x60\x15\x58\x5c\x64\x14\x59\x64\x75\x4a\xe6\x52\x85\x36\xb7\xc1\xa5\x00\x45\x65\x4d\xd3\x8c\x91\xee\xb2\xc3\x26\x42\xba\xa5\xf3\xa0\xdc\xe9\x60\x64\xe7\x75\x74\xc2\x3f\xfe\x09\x00\x00\xff\xff\x37\x36\x87\x74\x00\x10\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 8192, mode: os.FileMode(420), modTime: time.Unix(1502225954, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"1_initialize_schema.down.sql": _1_initialize_schemaDownSql,
	"1_initialize_schema.up.sql": _1_initialize_schemaUpSql,
	"2_add_username.down.sql": _2_add_usernameDownSql,
	"2_add_username.up.sql": _2_add_usernameUpSql,
	"bindata.go": bindataGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"1_initialize_schema.down.sql": &bintree{_1_initialize_schemaDownSql, map[string]*bintree{}},
	"1_initialize_schema.up.sql": &bintree{_1_initialize_schemaUpSql, map[string]*bintree{}},
	"2_add_username.down.sql": &bintree{_2_add_usernameDownSql, map[string]*bintree{}},
	"2_add_username.up.sql": &bintree{_2_add_usernameUpSql, map[string]*bintree{}},
	"bindata.go": &bintree{bindataGo, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

