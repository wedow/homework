// Code generated by go-bindata.
// sources:
// 1_initialize_schema.down.sql
// 1_initialize_schema.up.sql
// 2_add_username.down.sql
// 2_add_username.up.sql
// 3_add_parent_id.down.sql
// 3_add_parent_id.up.sql
// bindata.go
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __1_initialize_schemaDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\x29\xca\x2f\x50\x28\x49\x4c\xca\x49\x55\x28\xc8\x2f\x2e\x29\xb6\xe6\x02\x04\x00\x00\xff\xff\xf6\x8d\x0d\x67\x12\x00\x00\x00")

func _1_initialize_schemaDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__1_initialize_schemaDownSql,
		"1_initialize_schema.down.sql",
	)
}

func _1_initialize_schemaDownSql() (*asset, error) {
	bytes, err := _1_initialize_schemaDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1_initialize_schema.down.sql", size: 18, mode: os.FileMode(420), modTime: time.Unix(1501615514, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __1_initialize_schemaUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x1c\xcc\xcd\x0d\xc2\x30\x10\x44\xe1\xf3\xba\x8a\x39\x26\x12\x1d\x50\x0c\xda\xc4\x03\xb2\xf0\x9f\xec\x41\x90\xee\x51\x72\x7c\xef\xf0\xed\x83\x2e\x42\xbe\x65\xa2\xb7\xa9\x89\x25\x58\x8a\x30\xb3\x2d\xbd\x26\x47\xf2\x8c\x3e\x52\xf1\x71\xe0\xcd\xe3\x16\x6c\x6f\x55\xac\x82\x89\x3f\x9d\x7d\x19\xf1\xe1\xe7\x4a\x85\x53\x5e\x3a\x22\x9f\xfe\xc9\x42\x6d\xdf\x65\x0d\xeb\x3d\xfc\x03\x00\x00\xff\xff\x7b\xca\x9f\x3d\x6b\x00\x00\x00")

func _1_initialize_schemaUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__1_initialize_schemaUpSql,
		"1_initialize_schema.up.sql",
	)
}

func _1_initialize_schemaUpSql() (*asset, error) {
	bytes, err := _1_initialize_schemaUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1_initialize_schema.up.sql", size: 107, mode: os.FileMode(420), modTime: time.Unix(1501782884, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __2_add_usernameDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x28\xc8\x2f\x2e\x29\x56\x70\x09\xf2\x0f\x50\x70\xf6\xf7\x09\xf5\xf5\x53\x28\x2d\x4e\x2d\xca\x4b\xcc\x4d\xb5\xe6\x02\x04\x00\x00\xff\xff\x57\x16\xee\xd5\x28\x00\x00\x00")

func _2_add_usernameDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__2_add_usernameDownSql,
		"2_add_username.down.sql",
	)
}

func _2_add_usernameDownSql() (*asset, error) {
	bytes, err := _2_add_usernameDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "2_add_username.down.sql", size: 40, mode: os.FileMode(420), modTime: time.Unix(1502226941, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __2_add_usernameUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x28\xc8\x2f\x2e\x29\x56\x70\x74\x71\x51\x70\xf6\xf7\x09\xf5\xf5\x53\x28\x2d\x4e\x2d\xca\x4b\xcc\x4d\x55\x08\x71\x8d\x08\x51\xf0\xf3\x0f\x51\xf0\x0b\xf5\xf1\x51\x70\x71\x75\x73\x0c\xf5\x09\x51\x50\x57\xb7\xe6\x02\x04\x00\x00\xff\xff\x79\x09\xa6\xb0\x40\x00\x00\x00")

func _2_add_usernameUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__2_add_usernameUpSql,
		"2_add_username.up.sql",
	)
}

func _2_add_usernameUpSql() (*asset, error) {
	bytes, err := _2_add_usernameUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "2_add_username.up.sql", size: 64, mode: os.FileMode(420), modTime: time.Unix(1502226944, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __3_add_parent_idDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x28\xc8\x2f\x2e\x29\x56\x70\x09\xf2\x0f\x50\x70\xf6\xf7\x09\xf5\xf5\x53\x28\x48\x2c\x4a\xcd\x2b\x89\xcf\x4c\xb1\xe6\x02\x04\x00\x00\xff\xff\x86\x6f\x4f\x48\x29\x00\x00\x00")

func _3_add_parent_idDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__3_add_parent_idDownSql,
		"3_add_parent_id.down.sql",
	)
}

func _3_add_parent_idDownSql() (*asset, error) {
	bytes, err := _3_add_parent_idDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "3_add_parent_id.down.sql", size: 41, mode: os.FileMode(420), modTime: time.Unix(1502228419, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __3_add_parent_idUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x28\xc8\x2f\x2e\x29\x56\x70\x74\x71\x51\x70\xf6\xf7\x09\xf5\xf5\x53\x28\x48\x2c\x4a\xcd\x2b\x89\xcf\x4c\x51\x70\xf2\x74\xf7\xf4\x0b\xb1\xe6\x02\x04\x00\x00\xff\xff\x7b\xe9\x36\xe8\x2f\x00\x00\x00")

func _3_add_parent_idUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__3_add_parent_idUpSql,
		"3_add_parent_id.up.sql",
	)
}

func _3_add_parent_idUpSql() (*asset, error) {
	bytes, err := _3_add_parent_idUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "3_add_parent_id.up.sql", size: 47, mode: os.FileMode(420), modTime: time.Unix(1502228997, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x57\x4d\x6f\xdb\x46\x10\x3d\x73\x7f\xc5\x46\x40\x02\xb2\x50\x25\x92\xe2\xa7\x00\x5f\x12\xa7\x40\x0e\x4d\x80\x26\x39\x75\x0a\x61\x49\xee\x2a\x8b\x4a\xa4\x42\x52\xc9\xd8\x86\xff\x7b\x31\xbb\x94\x23\xbb\xfa\x48\x1c\xe7\x20\x6b\xbf\xe6\xcd\x1b\xf2\xbd\x1d\x79\x3a\xe5\xaf\x9a\x4a\xf2\xa5\xac\x65\x2b\x7a\x59\xf1\xe2\x8a\x2f\x9b\xdf\x0b\x5d\x57\xa2\x17\x13\x36\x9d\xf2\xae\xd9\xb6\xa5\xec\xe6\x34\x0e\x16\xba\xd6\xbd\x16\x2b\x7d\x2d\x17\x5d\xf9\x49\xae\xc5\xa4\x6a\xbe\xd6\x93\xee\xf3\xea\xd8\xfe\x76\xb3\xdb\x0d\x17\xa2\xaa\x16\xdb\x4e\xb6\xb5\x58\xcb\x7b\x81\x0f\xb6\xbe\xc5\xcc\xcc\xc6\x46\xb4\xb2\xee\x17\xba\xba\x17\xf4\x70\xef\x5b\xd4\x8e\xff\xb2\xa1\xd9\xe5\x3b\xfe\xf6\xdd\x07\xfe\xfa\xf2\xcd\x87\x67\x8c\x6d\x44\xf9\xaf\x58\x4a\xbe\xd6\xcb\x56\xf4\xba\xa9\x3b\xc6\xf4\x7a\xd3\xb4\x3d\x77\x99\x33\x2a\xae\x7a\xd9\x8d\x98\x33\x2a\x9b\xf5\xa6\x95\x5d\x37\x5d\x5e\xeb\x0d\x2d\xa8\x75\x4f\x5f\xba\xb1\x7f\xa7\xba\xd9\xf6\x7a\x45\x93\xc6\x04\x6c\x44\xff\x69\xaa\xf4\x4a\xd2\x80\x16\xba\xbe\xd5\xf5\xd2\xec\xf5\x7a\x2d\x47\xcc\x63\x4c\x6d\xeb\x72\x47\xef\x2f\x29\x2a\x97\x06\xfc\xef\x7f\x28\xed\x98\x53\xf1\xdc\x86\x79\xdc\xdd\xad\xca\xb6\x6d\x5a\x8f\xdf\x30\x67\x79\x6d\x66\x7c\x7e\xc1\x89\xd5\xe4\xad\xfc\x4a\x20\xb2\x75\x0d\x6d\x9a\xbf\xdc\x2a\x25\x5b\x03\xeb\x79\xcc\xd1\xca\x04\x3c\xbb\xe0\xb5\x5e\x11\x84\xd3\xca\x7e\xdb\xd6\x34\x1d\x73\xb5\xee\x27\xaf\x09\x5d\xb9\x23\x02\xe2\xcf\x3f\xcf\xf9\xf3\x2f\x23\xcb\xc4\xe4\xf2\x98\x73\xcb\x98\xf3\x45\xb4\xbc\xd8\x2a\x6e\xf3\xd8\x24\xcc\x59\x58\x3a\x17\x5c\x37\x93\x57\xcd\xe6\xca\x7d\x51\x6c\xd5\x98\x2f\xaf\x3d\xe6\x94\xab\xd7\x3b\xa6\x93\x57\xab\xa6\x93\xae\xc7\x9e\x8a\x0f\xc1\x58\xfc\x23\x40\xb2\x6d\x2d\xef\x61\xb1\xd8\xaa\xc9\x4b\xa2\xee\x7a\x63\x3a\xc1\x6e\x19\xeb\xaf\x36\x92\x8b\xae\x93\x3d\x3d\xf2\x6d\xd9\x13\x8a\xa9\x6f\x78\x1f\xcc\xd1\xb5\x6a\x38\x6f\xba\xc9\x1f\x7a\x25\xdf\xd4\xaa\xb9\x8b\x1b\x5e\xe1\x6e\x7d\x0f\xc1\xbc\x43\xce\x87\xd7\xc8\x9c\x4e\x5f\x9b\xb9\xae\xfb\x24\x62\xce\x9a\xfc\xc6\xef\x40\xff\x6c\x2a\x69\x16\x3f\xe8\xb5\xe4\x24\x93\x09\x8d\x28\x8f\x91\x8a\xab\xf4\xc3\x5c\x1e\x7f\x2b\xd6\xd2\xf5\x86\x0c\x94\x73\xa8\x52\xe9\x09\x65\x67\xb7\x27\x62\xdf\xeb\x6b\x8a\x35\x6c\xee\x87\x12\xd1\x93\xa1\xc4\xd5\xf5\xf6\x99\xdf\x07\xa0\xd2\xce\x01\x50\x71\xae\xf7\xad\xd0\xff\x21\x0c\xd5\x1f\x07\x79\xd3\x5d\xea\xd6\xf5\x78\xd1\x34\xab\xfd\x68\xb1\xea\xce\x54\x7e\xd5\xd9\xc2\x65\xab\x44\x29\x6f\x6e\xf7\xa2\x07\x49\x90\xca\x17\x8b\x03\xb7\xd8\x65\xf3\xb5\x7e\xff\x79\xc5\x2f\x06\x69\xb8\x23\xc0\x40\x01\x66\x05\xa0\x9f\x01\xfa\xfe\xe1\x8f\x52\x80\x91\x00\x0c\x73\xc0\x92\xbe\x15\x60\xec\x03\x86\x19\x60\x94\x03\x46\xa5\x5d\xa7\x71\x1c\xdb\xf5\x32\xb3\xe7\x42\x69\xe3\x8a\x04\x50\x26\x80\x7e\x08\xe8\x47\xf7\xb1\xcd\x27\x01\xcc\x2a\x40\xbf\x02\x4c\x52\xc0\x20\xdc\xe7\x30\xda\x5d\x3a\x27\xca\x1a\x9c\x71\xe8\xc6\xd9\xf9\x67\xef\xc6\x62\x8e\x73\xea\x19\x8d\x99\xe3\x8c\x4e\x35\x8a\xd1\x98\x39\xde\x9d\xc0\x4f\x20\x11\xa3\xdf\x8c\x41\xf7\x19\x19\x87\xde\x5d\x83\xe7\xab\x3a\x77\xe7\xdc\x5d\x15\xc6\xec\xf3\x8b\x87\xc2\xb9\x21\x4b\xcd\xf9\x99\x92\x38\xb9\x67\xce\x83\x6c\xcc\xc9\x06\xf3\x7d\x97\xb8\x51\xe8\x7b\x66\x9d\xc4\x3d\xb7\xe2\xff\x58\x6b\x74\x83\xd8\x0f\x92\x20\x8e\x83\x68\xcc\x7d\xef\x96\x39\x82\x08\xbc\x30\x35\xdf\x98\x42\xe7\x7c\xa8\x97\xd8\xcd\xcd\xdf\xdb\xbb\xb7\x22\xc6\x67\x85\xfb\x71\xf3\x58\xd9\x06\x24\x4d\xfa\x0c\xd2\x2a\x43\xc0\x99\x0f\x18\xf8\x80\x51\x04\x28\x03\x40\x35\x03\x2c\x04\x60\x26\x00\x67\x39\x60\x98\x58\xf9\x05\x95\x95\xb9\x5f\x02\x56\x02\xb0\x24\xd9\xd2\xd9\x10\x50\xf9\x80\xb9\x02\x94\x25\x60\x14\x00\xe6\x3e\xa0\x94\x80\x71\x00\x98\x86\x80\x69\x09\x28\x95\x3d\x27\x2b\xc0\x6c\x66\xad\x10\x85\x80\x85\x04\x4c\x62\x40\x41\xe3\x14\x50\xe4\x80\x19\xe5\x8d\x01\xe3\x6c\xe0\xe1\x03\x16\x14\x53\x01\x16\x95\xe5\x14\xa5\x80\x2a\x04\xcc\x4a\xc0\x19\xe5\x22\x1e\x94\x2f\x00\x94\xbe\xad\x51\xce\x00\x83\x04\x30\x29\x01\x13\x65\xed\x28\x4a\xc0\x2c\xb4\x39\x66\x0a\x30\xaf\x00\xd3\x0a\x30\xc8\x6d\x3c\x3d\x03\x99\x5a\x8b\x67\xc4\x61\x06\x18\x4b\xc0\x19\x59\x3d\xb4\x75\x2a\x09\x58\xe6\x96\x7f\x52\x01\x56\xca\xd6\x40\xcf\x54\x16\x80\xb3\x0a\x50\x95\xf6\xf9\x3c\xb4\x76\x5a\xd8\xeb\x81\x70\xe8\x5c\x52\x7c\xb7\xb5\xcd\x8b\x7f\x1a\x63\x1b\xa8\xa3\xb6\xb6\xbf\xba\xce\x9b\xda\xa0\x3c\xd6\xd2\xfb\xd5\xfc\x4a\x43\xef\x8a\xd9\xd9\xd9\x4f\x7f\xd8\xcf\x69\x16\x66\xd9\xd3\xf8\xf9\xfe\xaf\xe2\x9f\xe9\x41\x64\x2c\x45\x26\xcc\xad\xe8\x49\x7c\x64\x02\x8a\xa3\x79\x1a\x59\x83\xd0\xf8\x58\x1f\x8a\x13\xc0\xd4\xb7\x18\x74\xd6\x1f\x7a\x19\xad\x51\x0f\x52\xe9\xb0\x17\xdb\x0f\x99\x81\x70\xc8\x88\x91\xb4\xdf\xa6\xd7\x15\xf6\x62\x89\xc8\xa0\xf1\xe9\xde\x16\xa7\xd6\x94\x74\x41\x54\x03\xaf\x43\x06\x38\xf8\xa4\x1e\xa1\xfe\x83\x38\x46\xfa\x47\xfe\x79\x79\xa0\xfb\x83\xf1\xdf\x25\xfa\x53\x15\x3c\x95\xe2\x8f\xd6\x30\xc8\x3d\xf2\x7f\x54\xed\x61\x18\x26\x79\x14\xfc\x02\xb5\x3f\xbe\x71\x3d\xa5\xd6\xe9\xac\x39\x17\xfc\x9c\xce\x29\xcf\x2e\xbf\xf9\xad\x96\x59\x4c\x6a\x72\xd4\x44\x8d\x97\x86\xb9\x5f\x0c\xd8\x7b\x79\x0d\xef\x18\x30\x9d\xd9\xa6\x4a\xfb\xc4\x81\xf6\xc9\x83\xe4\x13\x6a\x88\xa7\xbc\x94\xe6\x36\x46\x24\x80\x05\x35\x71\x1f\xfe\x0b\x00\x00\xff\xff\x2c\x7a\xa0\xd2\x00\x10\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 8192, mode: os.FileMode(420), modTime: time.Unix(1502229107, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"1_initialize_schema.down.sql": _1_initialize_schemaDownSql,
	"1_initialize_schema.up.sql": _1_initialize_schemaUpSql,
	"2_add_username.down.sql": _2_add_usernameDownSql,
	"2_add_username.up.sql": _2_add_usernameUpSql,
	"3_add_parent_id.down.sql": _3_add_parent_idDownSql,
	"3_add_parent_id.up.sql": _3_add_parent_idUpSql,
	"bindata.go": bindataGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"1_initialize_schema.down.sql": &bintree{_1_initialize_schemaDownSql, map[string]*bintree{}},
	"1_initialize_schema.up.sql": &bintree{_1_initialize_schemaUpSql, map[string]*bintree{}},
	"2_add_username.down.sql": &bintree{_2_add_usernameDownSql, map[string]*bintree{}},
	"2_add_username.up.sql": &bintree{_2_add_usernameUpSql, map[string]*bintree{}},
	"3_add_parent_id.down.sql": &bintree{_3_add_parent_idDownSql, map[string]*bintree{}},
	"3_add_parent_id.up.sql": &bintree{_3_add_parent_idUpSql, map[string]*bintree{}},
	"bindata.go": &bintree{bindataGo, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

